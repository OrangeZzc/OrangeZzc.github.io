<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html</title>
      <link href="/2023/04/23/html/"/>
      <url>/2023/04/23/html/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p><img src="/imgs/image-20221007172246485-1682259484191.png" alt="image-20221007172246485"></p><h3 id="HTML快速入门"><a href="#HTML快速入门" class="headerlink" title="HTML快速入门"></a>HTML快速入门</h3><h4 id="A-概述"><a href="#A-概述" class="headerlink" title="A.概述"></a>A.概述</h4><ol><li><p>HTML文件以“ .htm ” 或 “ .html ” 为扩展名。</p></li><li><p>HTML结构标签</p><p> <img src="/imgs/image-20221007185522655-1682259484194.png" alt="image-20221007185522655"></p></li><li><p>HTML标签不区分大小写。</p></li><li><p>HTML标签的属性值用单引号 或 双引号 引起来。</p></li><li><p>HMTL语法松散(了解)</p></li></ol><h5 id="①第一个HTML程序"><a href="#①第一个HTML程序" class="headerlink" title="①第一个HTML程序"></a>①第一个HTML程序</h5><ol><li><p>新建文本文件，后缀名改为 .html</p></li><li><p>编写HTML结构标签</p></li><li><p>在<body>中定义文字</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;html快速入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">乾坤未定，你我皆是黑马~</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><p>​结果：</p><p><img src="/imgs/image-20221007190411713-1682259484194.png" alt="image-20221007190411713"></p><h5 id="②IDEA中写HTML"><a href="#②IDEA中写HTML" class="headerlink" title="②IDEA中写HTML"></a>②IDEA中写HTML</h5><ol><li><p>实现</p><p> 新建一个Java module —&gt; 将module 中的src 文件删除 —&gt; 在该module下建一个文件new directory 命名为html —&gt;</p><p> 选中刚才新建的文件，右键new HTML file ，选HTML 5 file —&gt; 完成</p></li><li><p>建好后的HTML文件标签解析：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html版本标识。!DOCTYPE代表是HTML5版本--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--规定当前页面编码集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>​</p><p>​</p><h4 id="B-基础标签"><a href="#B-基础标签" class="headerlink" title="B.基础标签"></a>B.基础标签</h4><p>​<img src="/imgs/image-20221007200439725-1682259484194.png" alt="image-20221007200439725"></p><ul><li><p>补充：</p><ol><li><p><font>标签中有三个属性：face（设置字体，如：宋体）、size（设置字体大小）、color（设置字体颜色）。</p></li><li><p>HTML、CSS中如何表示颜色：</p><ul><li>英文单词：red,pink,blue</li><li>rgb(值1，值2，值3)：值的取值范围为0-255。rgb中的 r 表示红色，g 表示绿色，b 表示蓝色，然后通过不同的值来匹配出不同的颜色，如：rgb(255，0，0)表示红色</li><li>#值1值2值3，值的范围：00-FF（FF：即255），原理与rgb的表示方式一样。</li></ul></li><li><hr>标签中也可以设置颜色属性color。</li></ol></li><li><p>例子：</p><p>  <img src="/imgs/image-20221007200521193-1682259484195.png" alt="image-20221007200521193"></p></li></ul><p>​</p><h4 id="C-图片、音频、视频标签"><a href="#C-图片、音频、视频标签" class="headerlink" title="C.图片、音频、视频标签"></a>C.图片、音频、视频标签</h4><h5 id="①概述"><a href="#①概述" class="headerlink" title="①概述"></a>①概述</h5><p><img src="/imgs/image-20221007210035634-1682259484195.png" alt="image-20221007210035634"></p><p><img src="/imgs/image-20230423223700021.png" alt="image-20230423223700021"></p><p>​使用controls属性时，可以直接写属性名即可。</p><h5 id="②补充"><a href="#②补充" class="headerlink" title="②补充"></a>②补充</h5><ol><li><p>上面三个标签中都可以写height、width属性，其值可以写：数字、百分比</p><ul><li>写数字：其单位默认为px（像素）。</li><li>写百分比：其含义是占页面大小的百分之多少。</li></ul></li><li><p>资源路径：</p><ul><li><p>绝对路径：带盘符</p></li><li><p>相对路径：资源相对于当前HTML页面的位置。不懂？见下面视频链接。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=63&amp;spm_id_from=pageDriver&amp;vd_source=9c398663599ac78b625d463b4ffc1ff5</span><br></pre></td></tr></table></figure><p>  练习：    </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ 代表：当前目录   ./可以省略不写</span><br><span class="line">../ 代表上一级目录</span><br></pre></td></tr></table></figure><p>  <img src="/imgs/image-20221007233250664-1682259484195.png" alt="image-20221007233250664"></p></li></ul></li></ol><h4 id="D-超链接标签"><a href="#D-超链接标签" class="headerlink" title="D.超链接标签"></a>D.超链接标签</h4><h5 id="①概述-1"><a href="#①概述-1" class="headerlink" title="①概述"></a>①概述</h5><p>​<img src="/imgs/image-20230423223605819.png" alt="image-20230423223605819"></p><h5 id="②例子"><a href="#②例子" class="headerlink" title="②例子"></a>②例子</h5><p><img src="/imgs/image-20221008114926972-1682259484195.png" alt="image-20221008114926972"></p><p>​效果展示：</p><p>​<img src="/imgs/image-20221008115017510-1682259484195.png" alt="image-20221008115017510"></p><h4 id="E-列表标签"><a href="#E-列表标签" class="headerlink" title="E.列表标签"></a>E.列表标签</h4><h5 id="①概述-2"><a href="#①概述-2" class="headerlink" title="①概述"></a>①概述</h5><p>​<img src="/imgs/image-20221008115507910-1682259484195.png" alt="image-20221008115507910"></p><h5 id="②例子-1"><a href="#②例子-1" class="headerlink" title="②例子"></a>②例子</h5><p>​<img src="/imgs/image-20221008115529971-1682259484195.png" alt="image-20221008115529971"></p><h4 id="F-表格标签"><a href="#F-表格标签" class="headerlink" title="F.表格标签"></a>F.表格标签</h4><h5 id="①概述-3"><a href="#①概述-3" class="headerlink" title="①概述"></a>①概述</h5><ol><li><p><img src="/imgs/image-20230423223008528.png" alt="image-20230423223008528"></p><p>使用&lt; th &gt;标签后，字体会被加粗 和 居中显示，通常使用在表头。</p></li><li><p>各标签对应的属性：</p><p> <img src="/imgs/image-20221008122830924-1682259484196.png" alt="image-20221008122830924"></p><p> 如果cellspacing值为0，则单元格之间就没有空白，即单元格之间的边框就会合在一起。</p></li><li><p>补充说明：</p><p> <img src="/imgs/image-20221008123156143-1682259484196.png" alt="image-20221008123156143"></p><p> ​该表格的第三行是有四个单元格的，第四行是只有三个单元格的。</p></li></ol><h5 id="②例子-2"><a href="#②例子-2" class="headerlink" title="②例子"></a>②例子</h5><p><img src="/imgs/image-20221008123410654-1682259484196.png" alt="image-20221008123410654"></p><p>​实现的效果：</p><p><img src="/imgs/image-20221008123433251-1682259484196.png" alt="image-20221008123433251"></p><h4 id="G-布局标签"><a href="#G-布局标签" class="headerlink" title="G.布局标签"></a>G.布局标签</h4><p><img src="/imgs/image-20221008141924482-1682259484196.png" alt="image-20221008141924482"></p><h4 id="H-表单标签"><a href="#H-表单标签" class="headerlink" title="H.表单标签"></a>H.表单标签</h4><h5 id="①概述-4"><a href="#①概述-4" class="headerlink" title="①概述"></a>①概述</h5><p>​表单：在页面中主要负责数据采集功能，使用<from>标签定义表单。</p><p>​表单项(或表单元素)：不同类型的input元素、下拉列表、文本域等</p><h5 id="②form标签"><a href="#②form标签" class="headerlink" title="②form标签"></a>②form标签</h5><p>​form标签内有两个属性：</p><ul><li>action：规定当提交表单时向何处发送表单数据，URL。当action&#x3D;”#”，则代表表单提交到当前页面。<ul><li>注意：表单项数据要想被提交，则必须指定其name属性，属性值随便写。</li></ul></li><li>method：指定表单提交的方式。<ul><li>get：默认值<ul><li>请求参数会拼接在URL后边。不安全。</li><li>URL的长度是有限制的，大小为4KB。</li></ul></li><li>post：<ul><li>请求参数会在http请求协议的请求体中，因此对请求参数的大小没有限制。且安全些。</li></ul></li><li>请求参数：即表单项中用户输入的值。</li></ul></li></ul><h5 id="③表单项标签"><a href="#③表单项标签" class="headerlink" title="③表单项标签"></a>③表单项标签</h5><ol><li><p>概述</p><p> <img src="/imgs/image-20221008160648807-1682259484196.png" alt="image-20221008160648807"></p></li><li><p>练习</p></li></ol><ul><li><p>提交按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span> <span class="comment">&lt;!--可以通过value值来改变提交按钮上显示的文本 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>lable标签</p><p>该标签的功能是：只要点击表单项附近的文字，输入框就能提示输入。</p><p>解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;文字&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>​通过点击文件就能跳到相应的输入框中提示输入。但究竟要跳到哪个输入框呢？就要指定label标签中的for属性和那个输入框的id属性，这样label标签就能通过for属性来找到对应的输入框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;travel&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;travel&quot;</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/imgs/image-20230423222315752.png" alt="image-20230423222315752"></p><p>如果两个单选框的name属性值不一样，就无法实现：多个只能选一个的功能。</p><p>如果不指定value值，提交表单时，其数据值就为：on，此值就没有意义了，所以得指定其值。</p></li><li><p>复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 旅游</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span> 游戏</span><br></pre></td></tr></table></figure><p>  注意：①如果让复选框都属于爱好这个项目里，那就要要求name属性值都得一样。②每一个复选框都要指定其value值，不然提交表单的时候，数据就会显示为：on，这样数据就没有意义了。</p></li><li><p>提交文件</p><p>应用：上传用户头像等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>隐藏输入</p><p>应用：我们需要用户的id值，但不希望用户自己来输入，此时就可以使用隐藏输入来指定用户的id值了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下拉列表</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;city&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">‘shanghai</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--如果option里有value，则提交时将提交value的值，而不是“上海” --&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文本域</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">个人描述<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;desc&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  cols：指定文本域中一行可以写多少个字。</p><p>  rows：指定文本域一共可以写多少行。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/04/23/mybatis/"/>
      <url>/2023/04/23/mybatis/</url>
      
        <content type="html"><![CDATA[<h3 id="①概述"><a href="#①概述" class="headerlink" title="①概述"></a>①概述</h3><h4 id="A-MyBatis"><a href="#A-MyBatis" class="headerlink" title="A.MyBatis"></a>A.MyBatis</h4><ul><li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发。</li><li>持久层：负责将数据保存到数据库的那一层代码。</li><li>框架：半成品软件，是一套可重复的、通用的、软件基础代码模型。在框架上构建软件会更加高效、规范、通用、可扩展。</li></ul><h4 id="B-JDBC缺点"><a href="#B-JDBC缺点" class="headerlink" title="B.JDBC缺点"></a>B.JDBC缺点</h4><ol><li>硬编码。即在注册驱动、获取连接时，变量值用的都是字符串，代表其值是固定的，不能改变，这就是硬编码。</li><li>操作繁琐。如：将数据装到对象中时。</li></ol><h4 id="C-MyBatis如何解决JDBC的缺点"><a href="#C-MyBatis如何解决JDBC的缺点" class="headerlink" title="C.MyBatis如何解决JDBC的缺点"></a>C.MyBatis如何解决JDBC的缺点</h4><ol><li>硬编码—&gt; 写在配置文件中</li><li>操作繁琐—&gt; 一行代码完，省去了设置值和转载数据的操作。</li></ol><p>​</p><h3 id="②快速入门"><a href="#②快速入门" class="headerlink" title="②快速入门"></a>②快速入门</h3><p>​从数据库中获取数据，然后将其放到一个对象中，再将对象放到一个集合中。</p><h4 id="A-实现步骤"><a href="#A-实现步骤" class="headerlink" title="A.实现步骤"></a>A.实现步骤</h4><p>​新建一个maven项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.导入mybatis依赖，放到pom.xml文件中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">      &lt;version&gt;3.5.7&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.导入MySQL数据库驱动：mysql-connector-java-5.1.34.jar</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;5.1.34&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//2.编写MyBatis核心配置文件 ---&gt; 即：将JDBC中的连接信息写到配置文件中</span></span><br><span class="line"><span class="comment">//2.1在main文件夹下的resources文件中新建一个配置文件：mybatis-config.xml</span></span><br><span class="line"><span class="comment">//2.2在刚才的新建文件中写入配置信息：见补充信息①</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.编写sql映射文件 --&gt; 原来SQL语句是写在代码中的，现在将其写在一个配置文件中，这样可以统一管理SQL语句。</span></span><br><span class="line"><span class="comment">//3.1在main文件夹下的resources文件中新建一个文件：操作的数据库表表名Mapper.xml</span></span><br><span class="line"><span class="comment">//3.2将补充信息2中的配置信息复制到该文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.加载MyBatis核心配置文件，获取SqlSessionFactory对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;..........&quot;</span>;</span><br><span class="line"><span class="comment">//resource：写MyBatis核心配置文件的路径(路径从resources文件夹下开始写)</span></span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"><span class="comment">//SqlSessionFactory类的对象就相当于JDBC中的Connection类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(); <span class="comment">//相当于JDBC中获取执行SQL语句的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.执行SQL语句</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> sqlSession.selectList(<span class="string">&quot;sql语句的标识&quot;</span>);<span class="comment">//SqlSession里还有其它的方法</span></span><br><span class="line"><span class="comment">//sql语句的标识：在配置sql映射文件中的时候，有定义该sql语句的namespace和id，两者用&quot;.&quot;连接起来。</span></span><br><span class="line"><span class="comment">//为什么要这么写呢？因为到时候会有很多的sql映射文件，一个sql文件里又可能有很多的sql语句，所以就用namespace和id来定位唯一一条sql语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">sqlSession.close();<span class="comment">//只要释放SqlSession类的对象的资源即可</span></span><br></pre></td></tr></table></figure><p>​</p><h5 id="补充信息①"><a href="#补充信息①" class="headerlink" title="补充信息①"></a>补充信息①</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面的东西不用管 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--driver 就相当于jdbc中的注册驱动操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下面三行就是数据库的连接信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/要连接的数据库?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  <span class="comment">&lt;!--登录数据库的用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span>  <span class="comment">&lt;!--登录数据库的密码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--resource：写sql映射文件的地址，用于加载sql映射文件的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;操作的数据库表表名Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!--如果使用了Mapper代理的方式，就可以简化SQL映射文件的加载，如：</span></span><br><span class="line"><span class="comment"> &lt;package name = &#x27;写resources文件下存放sql映射文件的文件名&#x27;/&gt; </span></span><br><span class="line"><span class="comment"> 这样就可以一次性加载该文件夾下所有的sql映射文件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p><h5 id="补充信息②"><a href="#补充信息②" class="headerlink" title="补充信息②"></a>补充信息②</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面的东西不用管 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;类的全类名&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SQL语句要写在对应的标签中，如：上面8-10行代码 --&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--可以在mapper标签中写多条sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​说明</p><ul><li><!--select id="该SQL语句的唯一标识，随便写只要不一样就行" resultType="规定该语句返回的类型，如果要将结果放到某个类中，就写那个类的全类名即可" --></li><li>mapper标签里的namespace：随便写一个即可，但要唯一。</li></ul><h4 id="B-解决视情况映射文件的警告提示"><a href="#B-解决视情况映射文件的警告提示" class="headerlink" title="B.解决视情况映射文件的警告提示"></a>B.解决视情况映射文件的警告提示</h4><ul><li>产生警告的原因：Idea和数据库没有建立连接，不识别表的信息。</li><li>解决方式：在Idea中配置MySQL数据库连接。具体操作，见网址：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_59118991/article/details/124562952</span><br></pre></td></tr></table></figure><hr><h3 id="③Mapper代理开发"><a href="#③Mapper代理开发" class="headerlink" title="③Mapper代理开发"></a>③Mapper代理开发</h3><h4 id="A-引入"><a href="#A-引入" class="headerlink" title="A.引入"></a>A.引入</h4><p>​上面我们通过MyBatis实现了对MySQL数据库的操作，但在实现步骤6(执行sql语句)中还是会存在硬编码的问题，所以我们引入了Mapper代理开发。这种方式在实际开发中很常用。</p><h4 id="B-实现步骤"><a href="#B-实现步骤" class="headerlink" title="B.实现步骤"></a>B.实现步骤</h4><ol><li><p>在pom.xml文件中导入Mysql依赖、mybatis依赖（见笔记MyBatis快速入门）。</p></li><li><p>在main文件夹下的resources文件下建mybatis核心配置文件(mybatis-config.xml)。(mybatis核心配置文件的内容见笔记MyBatis快速入门)。</p></li><li><p>在main文件夹下的java文件中建两个包：com.zzc.mapper 、com.zzc.pojo，这两个包分别放Mapper接口和数据库表对应的类。</p><p> <img src="/../imgs/image-20221007160103501-1682258537176.png" alt="image-20221007160103501"></p></li><li><p>在resources文件夹下，创建SQL映射文件，文件名为：数据库表表名Mapper.xml。文件内容见：笔记MyBatis快速入门。</p></li><li><p><strong>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</strong>。</p><p> 1. </p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在mapper包中放 “ 与SQL映射文件同名的Mapper接口 ”。</span><br></pre></td></tr></table></figure><p>  如何实现Mapper接口和SQL映射文件放置在同一目录下？前提SQL映射文件是放在main文件夹下的resources文件中。<br>   由于resources与java文件都是在同一个文件层级中，所以那个接口放在什么文件下，你就在resources文件下也建一个相同的文件层次来放SQL映射文件即可。使用new Directory的方式创建文件层级，<strong>但注意文件路径要用“ &#x2F; ”不能用“ . ”</strong> 。<br>  例子：Mapper接口放在了：<img src="/../imgs/image-20220926102308096-1682258537177.png" alt="image-20220926102308096"></p><p>   ​那配置文件UserMapper.xml应该放在哪？在resources下new Directory 命名为：com&#x2F;itheima&#x2F;mapper。然后将UserMapper.xml拖进这个文件里即可。</p></li><li><p><strong>设置SQL映射文件的namespace属性为Mapper接口全限定名</strong>，即：com.xxx.xxx.接口名。如按上面的例子来写，则为：com.itheima.mapper.UserMapper。</p></li><li><p><strong>在Mapper接口中定义方法，方法名就是SQL映射文件中SQL语句的id，并保持与sql语句中的参数类型和返回值类型一致。</strong>如果sql语句返回的是List<User>，则方法的放回值类型也是List<User>。</p></li><li><p><strong>修改MyBatis核心配置文件中的 <mapper resource=""/>，写上现在sql映射文件的地址。</strong></p><p> 文件地址默认从resources文件下开始写。如：sql映射文件放在resources文件夹下的com.zzc.mapper文件下。那就这样写：</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zzc/mapper/ExeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--如果使用了Mapper代理的方式，就可以简化SQL映射文件的加载，如：</span></span><br><span class="line"><span class="comment"> &lt;package name = &#x27;写resources文件下存放sql映射文件的文件名&#x27;/&gt; </span></span><br><span class="line"><span class="comment"> 这样就可以一次性加载该文件夾下所有的sql映射文件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编码（按照MyBatis快速入门中的步骤4-7进行码，其中第6步替换为下面两步）</p><ol><li><p>通过SqlSession的getMapper方法获取 Mapper接口的代理对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mapper接口名 mapper = sqlSession.getMapper(Mapper接口名.class);</span><br></pre></td></tr></table></figure></li><li><p>通过Mapper接口的代理对象，调用Mapper接口中对应方法完成sql的执行。</p></li></ol></li><li><p>编写数据库表对应的类，并放在pojo包下。</p></li><li><p>看看数据库中该表的字段是否与表对应的类的属性名一致，不一致得使用resultMap标签（见笔记MyBatis练习–&gt; 查询–所有数据 —&gt; resultMap标签），不然会导致部分数据不能自动封装到对象中。</p></li><li><p>关闭资源</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="C-实现原理"><a href="#C-实现原理" class="headerlink" title="C.实现原理"></a>C.实现原理</h4><ol><li>当我们通过SqlSession类的对象去调用getMapper(Mapper接口名.class)方法时，实际上就是找到了该接口，由于该接口的目录下还有其对应的SQL映射文件，因此也找到了该映射文件。</li><li>找到映射文件之后也就找到了SQL语句，那到底执行哪条sql呢？通过调用Mapper接口中的方法，通过该方法名我们就找到了sql的id，然后根据id在映射文件中找到具体的sql并执行。</li></ol><hr><h3 id="④MyBatis核心配置文件解释"><a href="#④MyBatis核心配置文件解释" class="headerlink" title="④MyBatis核心配置文件解释"></a>④MyBatis核心配置文件解释</h3><h4 id="A-environent标签"><a href="#A-environent标签" class="headerlink" title="A.environent标签"></a>A.environent标签</h4><ul><li><p>用于配置数据库连接信息，在<environents>标签中可以定义多个environent。</p></li><li><p>每个environent标签都有个id属性，用于标识此environent。</p></li><li><p>我们可以通过environents标签中的default属性来切换不同的environent。即将environent的id赋给default。</p></li><li><p><environent>标签里有个<transactionManager type="JDBC">标签，其作用是管理事务。不用管。</p></li><li><p><environent>标签里有个<dataSource type="POOLED">标签，不用管。</p></li><li><p>类型别名(typeAliases)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span> = <span class="string">&quot;com.itheima.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  我们在写sql映射文件时，该文件的配置里需指定返回值的类型，该返回值类型需要使用全类名的方式表示，这样的写法会冗余些，所以我们可以使用类型别名的方式，将某个包下的类用该类的类名来代替全类名。如：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--某个包com.zzc.pojo下有Person类，Man类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span> = <span class="string">&quot;com.itheima.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用之后，就可以用person来代替com.zzc.pojo.Person,用Man来代替com.zzc.pojo.Man --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意：配置各个标签时，需要遵循如下图先后顺序，不然报错。</p><ul><li><img src="/../imgs/image-20220926153642399-1682258537177.png" alt="image-20220926153642399"></li></ul></li></ul><h3 id="⑤MybatiX插件"><a href="#⑤MybatiX插件" class="headerlink" title="⑤MybatiX插件"></a>⑤MybatiX插件</h3><h4 id="A-功能介绍"><a href="#A-功能介绍" class="headerlink" title="A.功能介绍"></a>A.功能介绍</h4><p>​此插件可以帮我们快速地完成有些功能如：</p><p>​①</p><p>​<img src="/../imgs/image-20220928221305504-1682258537177.png" alt="image-20220928221305504"></p><p>​只要点击上图中的小鸟就可以跳到相应的SQL映射文件里对应的SQL语句。</p><p>​②映射文件对应的接口里，写下新的抽象方法，按 alt + 回车 ，选 “ mybatis…..”  ，就可以在对应的映射文件中创建相应的SQL语句。</p><p><img src="/../imgs/image-20221117182402031-1682258537177.png" alt="image-20221117182402031"></p><h4 id="B-插件安装"><a href="#B-插件安装" class="headerlink" title="B.插件安装"></a>B.插件安装</h4><p><img src="/../imgs/image-20220928222331498-1682258537177.png" alt="image-20220928222331498"></p><p><img src="/../imgs/image-20220928222432635-1682258537177.png" alt="image-20220928222432635"></p><h3 id="⑥MyBatis练习"><a href="#⑥MyBatis练习" class="headerlink" title="⑥MyBatis练习"></a>⑥MyBatis练习</h3><h4 id="A-查询–所有数据"><a href="#A-查询–所有数据" class="headerlink" title="A.查询–所有数据"></a>A.查询–所有数据</h4><h5 id="①引入"><a href="#①引入" class="headerlink" title="①引入"></a>①引入</h5><p>​MyBatis中，当数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据。</p><h5 id="②解决方法"><a href="#②解决方法" class="headerlink" title="②解决方法"></a>②解决方法</h5><p>​使用<strong>resultMap</strong>标签</p><p>​<strong>实习步骤</strong>：</p><ol><li>在SQL映射文件中定义resultMap标签。</li><li>在select标签中，使用resultMap属性(其值为resultMap中的id值) 替换 原来的resultType属性。</li></ol><p>​补充：</p><p>​如果使用的是注解开发，则将上面步骤2中的操作替换为：在接口方法上使用@ResultMap(“写resultMap中的id值”)即可。</p><p><img src="/imgs/image-20230423221329390.png" alt="image-20230423221329390"></p><h5 id="③resultMap标签的结构"><a href="#③resultMap标签的结构" class="headerlink" title="③resultMap标签的结构"></a>③resultMap标签的结构</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;entity.Employee&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;st_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;st_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;st_sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;st_email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​resultMap标签属性介绍：</p><ul><li>id：唯一标识该resultMap</li><li>type：写原来select标签中的resultType的值。</li><li>resultMap标签里有两个子标签：<ul><li><id column="..." property="..."/> 该标签用于完成主键字段的映射</li><li><result column="..." property="..."/> 该标签用于完成一般字段的映射</li></ul></li><li>上面两个标签中的 column 和 property<ul><li>column：表的列名</li><li>property：实体类的属性名</li></ul></li></ul><h4 id="B-查询–任意某个数据"><a href="#B-查询–任意某个数据" class="headerlink" title="B.查询–任意某个数据"></a>B.查询–任意某个数据</h4><p>​以根据Id来查找数据为例。</p><h5 id="①实现步骤"><a href="#①实现步骤" class="headerlink" title="①实现步骤"></a>①实现步骤</h5><ol><li><p>编写接口方法：Mapper接口</p><ul><li><p>参数为：id，结果为：Brand。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Brand selectById(int id);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写SQL语句：SQL映射文件</p></li></ol><p><img src="/../imgs/image-20221004191005819-1682258537177.png" alt="image-20221004191005819"></p><p>​parameterType：用于设置参数类型，可以省略不写。</p><p>​#{id}的解释见：占位符。</p><h5 id="②参数占位符"><a href="#②参数占位符" class="headerlink" title="②参数占位符"></a>②参数占位符</h5><ol><li><p>参数占位符有两种：#{ } 和 ${ } </p><ul><li>#{形参名}：在编译时会将其替换为 ? ，将来自动设置参数值。目的是防止SQL注入。</li><li>${形参名}：在编译时直接将形参值替换掉${形参名}。会存在SQL注入问题。</li><li>使用时机：参数传递的时候，使用 #{形参名}；表名或列名不固定的情况下：${形参名}</li></ul></li><li><p>SQL语句中特殊字符处理，如：小于号“ &lt; ”，在xml文件中属于标签的开始符号。所以就得使用如下方法进行处理：</p><ul><li>转移字符(小于号对应的转移字符为：” &amp;lt “ )</li><li>CDATA区：<![CDATA[内容]]>。使用时直接打CD就会提示出这个CDATA区。</li></ul></li></ol><h4 id="C-查询–条件查询"><a href="#C-查询–条件查询" class="headerlink" title="C.查询–条件查询"></a>C.查询–条件查询</h4><h5 id="①多条件查询"><a href="#①多条件查询" class="headerlink" title="①多条件查询"></a>①多条件查询</h5><p>​<img src="/../imgs/image-20221005113009918-1682258537177.png" alt="image-20221005113009918"></p><p>​当多条件查询时，Mapper接口中的方法应该怎么写呢？有三种写法：</p><ol><li><p><strong>散装参数</strong>：使用@Param(“SQL中的参数占位符名称”)。如：</p><p> <img src="/../imgs/image-20221005113057692-1682258537178.png" alt="image-20221005113057692"></p><p> ​接口方法中的参数status 设置的是SQL语句中的status参数。</p></li><li><p><strong>实体类封装参数</strong>：需要保证SQL中的参数名 和 实体类属性名对应上。</p><p> <strong>其原理是</strong>：通过SQL中的参数名 来找实体类中是否有同名的属性名，有则调用该属性的get方法来获取其值。</p><p> <strong>例子</strong>：<img src="/../imgs/image-20221005113735701-1682258537178.png" alt="image-20221005113735701"></p></li><li><p><strong>map集合</strong>：需要保证SQL语句中的参数名 和 map集合的键的名称对应上。</p><p> 例子：<img src="/../imgs/image-20221005113935878-1682258537178.png" alt="image-20221005113935878"></p></li></ol><h5 id="②多条件的动态查询"><a href="#②多条件的动态查询" class="headerlink" title="②多条件的动态查询"></a>②多条件的动态查询</h5><ol><li><p><strong>问题引入</strong>：我们需要根据实际情况来动态编写我们的SQL语句。</p></li><li><p><strong>动态SQL语句的实现</strong>：添加相应的标签，如：</p><ul><li>if（用于判断参数是否有值，使用test属性进行条件判断）</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></li><li><p>应用例子：</p><p> <strong>if的应用</strong>：</p><p> <img src="/../imgs/image-20221005170413700-1682258537178.png" alt="image-20221005170413700"></p><p> ​当status !&#x3D; null 时，就会执行status &#x3D; #{status}这条SQL语句。</p><p> ​<strong>where的应用</strong>：</p><p> ​如果上图中的status为null，companyName !&#x3D; null，brandName !&#x3D; null。这样就会导致SQL语句变成：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_brand</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">and</span> company_name <span class="keyword">like</span> #&#123;companyName&#125; <span class="keyword">and</span> brand_name <span class="keyword">like</span> #&#123;brandName&#125;</span><br></pre></td></tr></table></figure><p> ​这样的SQL语句会报错。</p><p> ​所以我们就可以使用<where>标签来代替where关键字，帮我们判断是否需要加连接关键字。如果需要加上，则会加上；如果不需要加上，则会帮我们删除掉。如：</p><p> <img src="/../imgs/image-20221005171330402-1682258537178.png" alt="image-20221005171330402"></p></li></ol><h5 id="③单条件的动态查询"><a href="#③单条件的动态查询" class="headerlink" title="③单条件的动态查询"></a>③单条件的动态查询</h5><ol><li><p>单条件的动态查询：从多个条件中选择一个。</p><p> ​例子：可以从多个条件中选择一个条件作为查询条件。</p></li><li><p><strong>实现</strong>：使用<choose>标签及其子标签<when>、<otherwise>。</p><ul><li><choose>相当于Java中的switch。</li><li><when>相当于Java中的case。</li><li><otherwise>相当于Java中的default。</li></ul></li><li><p>应用：</p><p> <img src="/../imgs/image-20221005211621505-1682258537178.png" alt="image-20221005211621505"></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_brand</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="comment">-- 下面与上面等价</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_brand</span><br></pre></td></tr></table></figure></li></ol><h5 id="④Like模糊匹配"><a href="#④Like模糊匹配" class="headerlink" title="④Like模糊匹配"></a>④Like模糊匹配</h5><p>​like关键字后面跟着参数占位符时，该怎么实现模糊匹配呢？</p><p>​使用数据库中的concat函数，concat(‘%’,#{数据名,jdbcType&#x3D;数据在数据库中的数据类型},’%’)</p><p>​例子：</p><p>​Mapper下这样写：</p><p><img src="/imgs/image-20230423221434471.png" alt="image-20230423221434471"></p><p>​对应的接口这样写：</p><p><img src="/imgs/image-20230423221445722.png" alt="image-20230423221445722"></p><p>​例子还有：<a href="https://zhuanlan.zhihu.com/p/58297267">mybatis中使用like关键字拼接SQL - 知乎 (zhihu.com)</a></p><h4 id="D-添加数据"><a href="#D-添加数据" class="headerlink" title="D.添加数据"></a>D.添加数据</h4><h5 id="①实现步骤-1"><a href="#①实现步骤-1" class="headerlink" title="①实现步骤"></a>①实现步骤</h5><ol><li>编写接口方法：Mapper接口<ul><li>方法的参数：除了id之外的所有数据（因为id是自增的）</li><li>方法的返回值类型：void（因为我们可以通过是否抛异常，来判断是否添加成功）</li></ul></li><li>编写SQL语句：在SQL映射文件中使用<insert>标签</li></ol><h5 id="②注意"><a href="#②注意" class="headerlink" title="②注意"></a>②注意</h5><p>​<img src="/../imgs/image-20221006115241104-1682258537178.png" alt="image-20221006115241104"></p><h5 id="③应用例子"><a href="#③应用例子" class="headerlink" title="③应用例子"></a>③应用例子</h5><p><img src="/../imgs/image-20221006115120607-1682258537178.png" alt="image-20221006115120607"></p><h4 id="E-添加数据–主键返回"><a href="#E-添加数据–主键返回" class="headerlink" title="E.添加数据–主键返回"></a>E.添加数据–主键返回</h4><p>①引入</p><p>​在数据添加成功后，需要获取插入数据库数据的主键的值。</p><p>​如：添加订单项时，订单项中需要设置所属订单的id。</p><p>②实现</p><p>​在<insert>标签里添加其属性：useGeneratedKeys、keyProperty，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span> = <span class="string">&quot;addOrder&quot;</span> <span class="attr">useGeneratedKeys</span> =<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>useGeneratedKeys：该属性用来设置，是否使用 JDBC 提供的 getGenereatedKeys() 方法。如果设置为true，将获取数据库内部产生的主键并赋值到 keyProperty 属性设置的请求对象的属性中。如果不设置useGeneratedKeys属性，则默认值为false。</li><li>keyProperty：该属性的作用是将插入操作的返回值赋给 PO 类的某个属性，通常为主键对应的属性。如果是联合主键，可以将多个值用逗号隔开。</li></ul><h4 id="F-修改–全部字段"><a href="#F-修改–全部字段" class="headerlink" title="F.修改–全部字段"></a>F.修改–全部字段</h4><h5 id="①实现"><a href="#①实现" class="headerlink" title="①实现"></a>①实现</h5><ol><li>编写接口方法：Mapper接口<ul><li>方法的参数：所有数据</li><li>方法的返回值类型：可以是void（通过是否抛异常来判断是否修改成功），可以是int（通过返回受影响行数来判断是否修改成功）</li></ul></li><li>编写SQL语句：SQL映射文件中使用<update>标签</li></ol><h5 id="②例子"><a href="#②例子" class="headerlink" title="②例子"></a>②例子</h5><p>​<img src="/../imgs/image-20221006150422586-1682258537178.png" alt="image-20221006150422586"></p><h4 id="G-修改–动态字段"><a href="#G-修改–动态字段" class="headerlink" title="G.修改–动态字段"></a>G.修改–动态字段</h4><h5 id="①引入-1"><a href="#①引入-1" class="headerlink" title="①引入"></a>①引入</h5><p>​有时候用户并不需要修改所有的数据，只需要修改某一部分的数据，因此我们就需要用到动态SQL。</p><h5 id="②实现"><a href="#②实现" class="headerlink" title="②实现"></a>②实现</h5><ol><li>编写接口方法：Mapper接口<ul><li>方法的参数：部分数据，将数据封装到对象中</li><li>方法的返回值：void 或 int (返回受影响的行数)</li></ul></li><li>编写SQL语句：SQL映射文件</li></ol><h5 id="③例子"><a href="#③例子" class="headerlink" title="③例子"></a>③例子</h5><p>​<img src="/../imgs/image-20221006153319643-1682258537178.png" alt="image-20221006153319643"></p><p>​<set>标签的作用：</p><ol><li>去除SQL语句后面多余的 “ , ” ，使SQL语句语法正确。</li><li>当set后面没有对应的修改语句时，会自动将set关键字删除。</li></ol><h4 id="H-删除–一个数据"><a href="#H-删除–一个数据" class="headerlink" title="H.删除–一个数据"></a>H.删除–一个数据</h4><h5 id="①实现-1"><a href="#①实现-1" class="headerlink" title="①实现"></a>①实现</h5><ol><li>编写接口方法：Mapper接口<ul><li>方法的参数：id</li><li>方法的返回值类型：void</li></ul></li><li>编写SQL语句：SQL映射文件</li></ol><h5 id="②例子-1"><a href="#②例子-1" class="headerlink" title="②例子"></a>②例子</h5><p><img src="/../imgs/image-20221006155821062-1682258537179.png" alt="image-20221006155821062"></p><h4 id="I-删除–批量删除"><a href="#I-删除–批量删除" class="headerlink" title="I.删除–批量删除"></a>I.删除–批量删除</h4><h5 id="①实现-2"><a href="#①实现-2" class="headerlink" title="①实现"></a>①实现</h5><ol><li><p>编写接口方法：Mapper接口</p><ul><li>方法的参数：id数组（批量删除的数量较多，可以将其存储到一个数组中）</li><li>方法的返回值类型：void</li></ul></li><li><p>编写SQL语句：SQL映射文件</p><p> 形式一：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">delete from tb_brand</span><br><span class="line">where id in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;数组名&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p> ​如果使用上面的这种形式，则Mapper接口中的方法需写成：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;数组名&quot;)</span> <span class="type">int</span>[] 数组名)</span>;</span><br></pre></td></tr></table></figure><p> 形式二：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">delete from tb_brand</span><br><span class="line">where id in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis会将数组参数，封装为一个Map集合。该Map集合的名字为：arry。 --&gt;</span></span><br></pre></td></tr></table></figure><p> ​如果使用上面的这种形式，则Mapper接口中的方法需写成：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="type">int</span>[] 数组名)</span>;</span><br></pre></td></tr></table></figure></li></ol><h5 id="②SQL映射文件解释"><a href="#②SQL映射文件解释" class="headerlink" title="②SQL映射文件解释"></a>②SQL映射文件解释</h5><p>​引入：如果要删除多个数据，我们可以这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">delete from tb_brand</span><br><span class="line">where id in (?,?,?)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​但这样写会存在一个问题：一个占位符? 代表一个参数，因此该SQL语句只能删除三条记录，也就是说其删除数据的数量是固定的。如何实现删除任意数量的数据呢？使用<foreach>标签</p><ul><li><foreach>标签： 该标签用于遍历数组的。标签里面有一些属性，如：<ul><li>collection：要遍历的数组名字 或 集合名字</li><li>item：表示集合中每一个元素进行迭代时的别名。</li><li>separator：表示在每次进行迭代之间以什么符号作为分隔符。</li><li>open：表示该语句以什么开始。open&#x3D;”(“，其效果相当于上面第三行代码中 in 后面的 “ ( “</li><li>close：表示该语句以什么结束。close&#x3D;”)”，其效果相当于上面第三行代码中 最后一个问号后面的 “ ) ”。</li></ul></li></ul><h3 id="⑦参数传递"><a href="#⑦参数传递" class="headerlink" title="⑦参数传递"></a>⑦参数传递</h3><p>​MyBatis 接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式。</p><h4 id="A-多个参数"><a href="#A-多个参数" class="headerlink" title="A.多个参数"></a>A.多个参数</h4><p>​当接收多个参数时：</p><p>​MyBatis会将参数封装为Map集合，其中value值为参数的值，一个参数将对应两个键名：arg 和 param。即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.put(&quot;arg0&quot;,参数值1)</span><br><span class="line">map.put(&quot;param1&quot;,参数值1)</span><br><span class="line">map.put(&quot;arg0&quot;,参数值2)</span><br><span class="line">map.put(&quot;param1&quot;,参数值2)</span><br></pre></td></tr></table></figure><p>​因此我们可以在SQL语句中通过arg 或 param来获取参数的值，但这种方式不利于阅读，所以我们使用@Param注解来解决这个问题。@Param(“username”)，username将会替换掉Map集合中默认的arg键名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.put(&quot;username&quot;,参数值1)</span><br><span class="line">map.put(&quot;param1&quot;,参数值1)</span><br></pre></td></tr></table></figure><p>​因此我们在SQL语句中，可以通过username来获取参数值1。</p><h4 id="B-单个参数"><a href="#B-单个参数" class="headerlink" title="B.单个参数"></a>B.单个参数</h4><ul><li><p><strong>POJO类</strong>：直接使用，属性名 和 参数占位符名称 一致。</p><ul><li><p>POJO类：如有表 user ，与其对应的类 User 就被称为POJO类。</p></li><li><p>例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">select</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Map集合</strong>：直接使用，但键名 和 参数占位符名称 要一致，不然会出错</p><ul><li><p>例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">select</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Collection</strong>：封装为Map集合，推荐使用@Param注解，替换Map集合中默认的arg键名。</p><ul><li>Collection封装为Map后，Collection集合作为value，其对应的键名有两个：arg0、collection，即在SQL语句中写arg0 或 collection 都可以获取到参数的值。</li></ul></li><li><p><strong>List</strong>：封装为Map集合，推荐使用@Param注解，替换Map集合中默认的arg键名。</p><ul><li>List封装为Map后，List集合作为value，其对应的键名有三个：arg0、collection、list，即在SQL语句中写arg0 或 collection  或 list 都可以获取到参数的值。</li></ul></li><li><p><strong>数组</strong>：封装为Map集合，推荐使用@Param注解，替换Map集合中默认的arg键名。</p><ul><li>数组封装为Map后，数组作为value，其对应的键名有两个：arg0、array，即在SQL语句中写arg0 或 array 都可以获取到参数的值。</li></ul></li><li><p><strong>其它类型</strong>：直接使用。</p></li></ul><h4 id="C-练习"><a href="#C-练习" class="headerlink" title="C.练习"></a>C.练习</h4><p>​<img src="/../imgs/image-20221006210550955-1682258537179.png" alt="image-20221006210550955"></p><p>​红色问号的地方应该写：user.username 、user.password。</p><p>​因为通过user就能获取到user对象，再通过对象调属性的方式就能得到对象相应的属性值。</p><h3 id="⑧注解开发"><a href="#⑧注解开发" class="headerlink" title="⑧注解开发"></a>⑧注解开发</h3><h4 id="A-什么是注解开发"><a href="#A-什么是注解开发" class="headerlink" title="A.什么是注解开发"></a>A.什么是注解开发</h4><p>​即将SQL语句写在注解中，然后注解写在Mapper接口的相应方法上面。</p><p><img src="/../imgs/image-20221006220820851-1682258537179.png" alt="image-20221006220820851"></p><p>​除了SQL语句编写的位置不一样外，其它的相关操作（如：SQL语句的执行）都与之前一样。</p><h4 id="B-四种注解"><a href="#B-四种注解" class="headerlink" title="B.四种注解"></a>B.四种注解</h4><ul><li>查询：@Select</li><li>添加：@Insert</li><li>修改：@Update</li><li>删除：@Delete</li></ul><h4 id="C-使用场景"><a href="#C-使用场景" class="headerlink" title="C.使用场景"></a>C.使用场景</h4><p>​当要完成简单的功能时，我们就可以使用注解开发。</p><p>​当要完成复杂的功能时，我们还是用配置文件来写SQL。</p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb概述</title>
      <link href="/2023/04/23/javaweb%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/04/23/javaweb%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JavaWeb介绍"><a href="#一、JavaWeb介绍" class="headerlink" title="一、JavaWeb介绍"></a>一、JavaWeb介绍</h3><ol><li><p>web：能够通过浏览器访问的网站。</p></li><li><p>JavaWeb：用Java来开发网站</p></li><li><p>Web互联网系统的三大组成部分：</p><p> <img src="/../imgs/image-20220913105430987-1682257740401.png" alt="image-20220913105430987"></p></li><li><p>学习内容</p><p> <img src="/../imgs/image-20220913110518745-1682257740402.png" alt="image-20220913110518745"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><h3 id="一、数据库概述"><a href="#一、数据库概述" class="headerlink" title="一、数据库概述"></a>一、数据库概述</h3><h4 id="1、相关概念"><a href="#1、相关概念" class="headerlink" title="1、相关概念"></a>1、相关概念</h4><ul><li>数据库：存储数据的仓库。简称：DB。</li><li>数据库管理系统：管理数据库的软件，即：可以对数据库中的数据进行增删改查、添加数据库等操作的软件。简称：DBMS。</li><li>SQL：操作和管理关系型数据库的编程语言。</li><li>关系型数据库(RDBMS)：用表进行数据存储的数据库就叫关系型数据库，该表称为二维表。</li></ul><h4 id="2、MySQL数据库安装"><a href="#2、MySQL数据库安装" class="headerlink" title="2、MySQL数据库安装"></a>2、MySQL数据库安装</h4><h5 id="A-下载"><a href="#A-下载" class="headerlink" title="A.下载"></a>A.下载</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://downloads.mysql.com/archives/community/</span><br></pre></td></tr></table></figure><p>​选择需要的版本和电脑位数进行下载，不要下载带debug<img src="/imgs/image-20220913153802678.png" alt="image-20220913153802678"></p><h5 id="B-安装"><a href="#B-安装" class="headerlink" title="B.安装"></a>B.安装</h5><ol><li>对下载好的安装包进行解压</li></ol><h5 id="C-配置"><a href="#C-配置" class="headerlink" title="C.配置"></a>C.配置</h5><h6 id="①配置环境变量"><a href="#①配置环境变量" class="headerlink" title="①配置环境变量"></a>①配置环境变量</h6><p>​a.复制当前MySQL的安装目录。</p><img src="/imgs/image-20230423204928910.png" alt="image-20230423204928910" style="zoom:80%;" /><p>​b.新建一个环境变量</p><p><img src="/imgs/image-20220913155201538.png" alt="image-20220913155201538"></p><img src="/imgs/image-20230423205118768.png" alt="image-20230423205118768" style="zoom: 67%;" /><p>​c.对系统变量中的Path进行编辑</p><p><img src="/imgs/image-20230423205144683.png" alt="image-20230423205144683"></p><h6 id="②配置配置文件信息"><a href="#②配置配置文件信息" class="headerlink" title="②配置配置文件信息"></a>②配置配置文件信息</h6><p>​a.在MySQL的安装目录下新建一个my.ini文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><img src="/imgs/image-20230423205206465.png" alt="image-20230423205206465" style="zoom:67%;" /><p>​b.初始化MySQL</p><p>​在c盘下打开该文件：</p><p><img src="/imgs/image-20220913161859039.png" alt="image-20220913161859039"></p><p>​在该文件下输入：cmd，然后以管理员身份运行</p><p><img src="/imgs/image-20220913162003905.png" alt="image-20220913162003905"></p><p>​将下面的命令复制到cmd中并运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><p>​c.注册MySQL服务</p><p>​复制下面命令，到刚才的cmd中，并运行，接着输入：net start mysql回车，启动MySQL。至此MySQL已经按照完成。</p><p><img src="/imgs/image-20220913163328013.png" alt="image-20220913163328013"></p><h5 id="D-修改MySQL默认的用户名和密码"><a href="#D-修改MySQL默认的用户名和密码" class="headerlink" title="D.修改MySQL默认的用户名和密码"></a>D.修改MySQL默认的用户名和密码</h5><p>​在刚才的cmd中，输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password 1234</span><br><span class="line">//其中root为用户名，1234为用户密码</span><br></pre></td></tr></table></figure><p>如果不懂可以看下面的网站：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_43214644/article/details/126678750?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%BB%91%E9%A9%ACMySQL%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-126678750.142^v47^new_blog_pos_by_title,201^v3^add_ask&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure><h5 id="E-启动与停止"><a href="#E-启动与停止" class="headerlink" title="E.启动与停止"></a>E.启动与停止</h5><p>​在运行处输入：services.msc — &gt; 找到MySQL —&gt; 右键启动\停止</p><p><img src="/imgs/image-20220916104719913.png" alt="image-20220916104719913"></p><hr><h4 id="3、MySQL数据模型"><a href="#3、MySQL数据模型" class="headerlink" title="3、MySQL数据模型"></a>3、MySQL数据模型</h4><p>​<img src="/imgs/image-20220913172745180.png" alt="image-20220913172745180"></p><p>​在数据库管理系统中，我们可以创建多个数据库（就相当于在硬盘中创建多个文件夹），在数据库里我们可以创建多个数据表（就相当于在硬盘中的那个数据库文件夹下创建多个文件），表中又可以有多条数据（在硬盘中数据也相当于文件）。</p><h4 id="4、Navicat使用"><a href="#4、Navicat使用" class="headerlink" title="4、Navicat使用"></a>4、Navicat使用</h4><p>​Navicat是一款操作MySQL的图形化界面软件。</p><h5 id="A-使用"><a href="#A-使用" class="headerlink" title="A.使用"></a>A.使用</h5><p>​打开navicat点击左上角的连接，将navicat连接到电脑的MySQL。</p><p><img src="/imgs/image-20220914133237052.png" alt="image-20220914133237052"></p><h6 id="①新建数据库"><a href="#①新建数据库" class="headerlink" title="①新建数据库"></a>①新建数据库</h6><p>​<img src="/imgs/image-20220914140226747.png" alt="image-20220914140226747"></p><p>​对上面的图标右击，新建数据库，字符集选UTF-8。</p><h6 id="②修改表的数据"><a href="#②修改表的数据" class="headerlink" title="②修改表的数据"></a>②修改表的数据</h6><p>​选中要修改的表 –&gt; 右键 –&gt; 设计表 –&gt; 直接对要修改的内容进行修改即可</p><h6 id="③编写SQL语句"><a href="#③编写SQL语句" class="headerlink" title="③编写SQL语句"></a>③编写SQL语句</h6><p>​点击顶部中查询图标 –&gt; 新建查询 –&gt; 编写SQL语句 –&gt; 编写完，选中你要执行的语句，右键运行即可</p><h4 id="5、MySQL命名规范"><a href="#5、MySQL命名规范" class="headerlink" title="5、MySQL命名规范"></a>5、MySQL命名规范</h4><ol><li><p>只能使用这些命名：必须只能包含 A–Z, a–z, 0–9, _ 。</p></li><li><p>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</p></li><li><p>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来。如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了</span><br><span class="line">CREATE TABLE `order`();</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h3><p>​SQL是一门操作关系型数据库的编程语言。</p><h4 id="1、SQL通用语法"><a href="#1、SQL通用语法" class="headerlink" title="1、SQL通用语法"></a>1、SQL通用语法</h4><ul><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，但建议关键字采用大写形式。</p></li><li><p>注释：</p><ul><li><p>单行注释：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方式一:注意注释内容前的空格不要省略 */</span></span><br><span class="line"><span class="comment">-- 注释内容</span></span><br><span class="line"><span class="comment">/* 方式二：该方式是MySQL特有的方式*/</span></span><br><span class="line">#注释内容</span><br></pre></td></tr></table></figure></li><li><p>多行注释：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2、SQL分类"><a href="#2、SQL分类" class="headerlink" title="2、SQL分类"></a>2、SQL分类</h4><ul><li>DDL：定义数据库，表等</li><li>DML：对表中的数据进行增删改</li><li>DQL：对表中的数据进行查询</li><li>DCL：创建数据库用户、控制数据库的访问权限</li></ul><h4 id="3、DDL"><a href="#3、DDL" class="headerlink" title="3、DDL"></a>3、DDL</h4><h5 id="A-操作数据库"><a href="#A-操作数据库" class="headerlink" title="A.操作数据库"></a>A.操作数据库</h5><h6 id="①查询"><a href="#①查询" class="headerlink" title="①查询"></a>①查询</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p>​查询当前数据库管理系统下有多少个数据库。MySQL自带四个数据库，分别为：</p><ul><li>information_schema（存储MySQL中的表和库信息，该数据库使用视图进行数据存储，而视图属于逻辑，所以在磁盘中没有对应的文件夹）</li><li>mysql（存储管理权限的数据库）</li><li>performance_schema（有关性能的数据库）</li><li>sys（与系统有关的数据库）</li></ul><h6 id="②创建数据库"><a href="#②创建数据库" class="headerlink" title="②创建数据库"></a>②创建数据库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];</span><br></pre></td></tr></table></figure><p>​说明：</p><ul><li>方括号为可选项</li><li>如果写了“IF NOT EXISTS”，则先判断要创建的数据库是否存在，不存在再执行创建操作。</li><li>DEFAULT CHARSET ：指定该数据库使用什么字符集（推荐使用utf8mb4），不写则使用默认的字符集</li><li>COLLATE：用于规定字符串的排序规则。<ul><li>MySQL8.0以下版本，默认的CHARSET是Latin1，默认的COLLATE是latin1_swedish_ci。</li><li>从mysql8.0开始，默认的CHARSET已经改为了utf8mb4，默认的COLLATE改为了utf8mb4_0900_ai_ci。</li></ul></li></ul><h6 id="③删除数据库"><a href="#③删除数据库" class="headerlink" title="③删除数据库"></a>③删除数据库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE [IF EXISTS] 数据库名;</span><br></pre></td></tr></table></figure><p>​说明：</p><ul><li>方括号为可选项</li><li>如果写了“IF EXISTS”，先判断要删除的数据库存不存在，存在再执行删除操作。</li></ul><h6 id="④使用数据库"><a href="#④使用数据库" class="headerlink" title="④使用数据库"></a>④使用数据库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#要想对数据库里的数据进行操作，我们得先进入数据库里，使用如下命令：</span><br><span class="line">USE 数据库名;</span><br><span class="line"></span><br><span class="line">#查看当前使用的是哪个数据库</span><br><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><h5 id="B-操作表"><a href="#B-操作表" class="headerlink" title="B.操作表"></a>B.操作表</h5><h6 id="①查询表"><a href="#①查询表" class="headerlink" title="①查询表"></a>①查询表</h6><p>​查询当前数据库下所有表名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><p>​查询表的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名称;</span><br></pre></td></tr></table></figure><p>​查询指定表的建表语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>​注意：要想执行上述操作，得先进入相应的数据库中。</p><h6 id="②创建表"><a href="#②创建表" class="headerlink" title="②创建表"></a>②创建表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (</span><br><span class="line">字段1 数据类型1 [COMMENT 字段1注释],</span><br><span class="line">字段2 数据类型2 [COMMENT 字段2注释],</span><br><span class="line">....</span><br><span class="line">字段n 数据类型n [COMMENT 字段n注释]</span><br><span class="line">)[COMMENT 表注释];</span><br><span class="line">-- 这里的注释要用单引号括起来。</span><br><span class="line">/* 字段就相当于表中的列 */</span><br></pre></td></tr></table></figure><p>​注意：最后一行末尾，不能加逗号。</p><h6 id="③删除表"><a href="#③删除表" class="headerlink" title="③删除表"></a>③删除表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] 表名;</span><br></pre></td></tr></table></figure><ul><li>括号内容为可选项。</li><li>如果选了IF EXISTS ，则先判断要删除的表是否存在，存在才进行删除操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><ul><li>删除指定表，并重新创建该表，原表中的结构保留了下来。</li><li>不建议使用。</li></ul><h6 id="④修改表"><a href="#④修改表" class="headerlink" title="④修改表"></a>④修改表</h6><p> a.向表中添加字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>b.修改字段的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure><p>c.修改字段名和字段类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>d.修改字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure><p>e.修改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure><h4 id="4、DML"><a href="#4、DML" class="headerlink" title="4、DML"></a>4、DML</h4><p>​对表中的数据进行操作。</p><h5 id="A-添加数据"><a href="#A-添加数据" class="headerlink" title="A.添加数据"></a>A.添加数据</h5><p><img src="/imgs/image-20220914144613242.png" alt="image-20220914144613242"></p><p>​注意：</p><ul><li>插入数据时，字符串和日期型数据应该包含在引号当中。</li></ul><h5 id="B-修改数据"><a href="#B-修改数据" class="headerlink" title="B.修改数据"></a>B.修改数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 列1 = 值1,列2 = 值2,... [WHERE 条件];</span><br></pre></td></tr></table></figure><p>​说明：</p><ul><li>修改语句中的条件语句为可选项，如果不加条件，则将所有数据都修改；添加，则修改符合条件的数据。</li></ul><h5 id="C-删除数据"><a href="#C-删除数据" class="headerlink" title="C.删除数据"></a>C.删除数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE 条件];</span><br></pre></td></tr></table></figure><p>​说明：</p><ul><li>条件语句是可选项。如果不加条件语句，则将所有数据都删除。如果添加条件语句，则删除符合条件的数据。</li><li>删除的是一整行数据。</li><li>DELETE语句不能删除某一个字段的值(可以使用UPDATE)</li></ul><h4 id="5、DQL"><a href="#5、DQL" class="headerlink" title="5、DQL"></a>5、DQL</h4><p>​对表中的数据进行查询操作。</p><p>​查询语法：（编写时各关键字的顺序不能调换）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段</span><br><span class="line">HAVING</span><br><span class="line">分组后条件</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段</span><br><span class="line">LIMIT</span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><h5 id="A-基础查询"><a href="#A-基础查询" class="headerlink" title="A.基础查询"></a>A.基础查询</h5><h6 id="①查询多个字段"><a href="#①查询多个字段" class="headerlink" title="①查询多个字段"></a>①查询多个字段</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1,字段2,字段3... FROM 表名;</span><br><span class="line">#如果想查询所有字段，则：</span><br><span class="line">SELECT * FROM 表名; -- 不建议使用，因为有些公司不给用</span><br></pre></td></tr></table></figure><h6 id="②去除重复记录"><a href="#②去除重复记录" class="headerlink" title="②去除重复记录"></a>②去除重复记录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure><p>​<strong>注意</strong>：DISTINCT 需要放到所有列名的前面，不然会报错。</p><p><img src="/imgs/image-20220914154829174.png" alt="image-20220914154829174"></p><h6 id="③给字段起别名"><a href="#③给字段起别名" class="headerlink" title="③给字段起别名"></a>③给字段起别名</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1 AS 别名1,字段2 AS 别名2,字段3... FROM 表名;</span><br><span class="line"># AS可以省略，但省略后原始字段名与别名之间得至少有一个空格的间距</span><br><span class="line"># 别名要用单引号包起来</span><br></pre></td></tr></table></figure><h5 id="B-条件查询-WHERE"><a href="#B-条件查询-WHERE" class="headerlink" title="B.条件查询(WHERE)"></a>B.条件查询(WHERE)</h5><h6 id="①格式"><a href="#①格式" class="headerlink" title="①格式"></a>①格式</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br></pre></td></tr></table></figure><h6 id="②SQL中的条件"><a href="#②SQL中的条件" class="headerlink" title="②SQL中的条件"></a>②SQL中的条件</h6><p><img src="/imgs/image-20220914163900598.png" alt="image-20220914163900598"></p><p>​<strong>说明</strong>：</p><ul><li>日期也可以比较大小，即可以使用：&gt;、&lt;、&gt;&#x3D;、between and等</li><li>null值的比较不能使用 &#x3D; 或  !&#x3D; 。需要使用 is 或 is not 进行比较。</li></ul><h6 id="③应用例子"><a href="#③应用例子" class="headerlink" title="③应用例子"></a>③应用例子</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询年龄大于等于20并且小于等于30的学生信息</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 AND age &lt;= 30;-- 方式一：</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 30;-- 方式二，包含20、30</span><br><span class="line"></span><br><span class="line">#查询入学日期在&#x27;1998-09-01&#x27; 到 &#x27;1999-09-01&#x27;之间的学生信息</span><br><span class="line">SELECT * FROM student WHERE hire_date BETWEEN &#x27;1998-09-01&#x27; AND &#x27;1999-09-01&#x27;;</span><br><span class="line">SELECT * FROM student WHERE hire_date &gt;= &#x27;1998-09-01&#x27; AND hire_date &lt;= &#x27;1999-09-01&#x27;;</span><br><span class="line"></span><br><span class="line">#查询年龄等于18岁或者年龄等于20岁或者年龄等于22岁的学生信息</span><br><span class="line">SELECT * FROM student WHERE age =18 OR age = 20 OR age = 22;</span><br><span class="line">SELECT * FROM student WHERE age IN (18,20,22);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20220914171639743.png" alt="image-20220914171639743"></p><h5 id="C-排序查询-ORDER-BY"><a href="#C-排序查询-ORDER-BY" class="headerlink" title="C.排序查询(ORDER BY)"></a>C.排序查询(ORDER BY)</h5><h6 id="①格式-1"><a href="#①格式-1" class="headerlink" title="①格式"></a>①格式</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1],排序字段名2 [排序方式2] …;</span><br></pre></td></tr></table></figure><p>​按照给定的字段进行排序。排序方式有两种：ASC(升序)、DESC(降序)。当没有显示指明用哪种排序方式时，默认采用ASC。</p><h6 id="②说明"><a href="#②说明" class="headerlink" title="②说明"></a>②说明</h6><p>​如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序。</p><h5 id="D-分组查询-GROUP-BY"><a href="#D-分组查询-GROUP-BY" class="headerlink" title="D.分组查询(GROUP BY)"></a>D.分组查询(GROUP BY)</h5><h6 id="①聚合函数"><a href="#①聚合函数" class="headerlink" title="①聚合函数"></a>①聚合函数</h6><p>​<strong>概念</strong>：将一列数据作为一个整体，进行纵向计算</p><p>​<strong>格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 聚合函数名(列名) FROM 表;</span><br></pre></td></tr></table></figure><p>​<strong>聚合函数分类</strong>：</p><p><img src="/imgs/image-20220914180110753.png" alt="image-20220914180110753"></p><p>​<strong>注意</strong>：<strong>null 值不参与所有聚合函数运算</strong></p><p>​<strong>说明</strong>：</p><ol><li><p>COUNT()：括号里只能放<strong>主键</strong> 或 ***** ，不然统计出来的数据不准确。</p><p> COUNT(*)的含义：计算该表中有多少行数据。</p></li></ol><h6 id="②分组查询"><a href="#②分组查询" class="headerlink" title="②分组查询"></a>②分组查询</h6><p>​<strong>概念</strong>：根据某个字段A进行分组，字段值相同的将被分到一起。</p><p>​<strong>格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [WHERE 分组前条件限定] GROUP BY 分组字段名 [HAVING 分组后条件过滤];</span><br><span class="line">/*</span><br><span class="line">HVAING 里只能使用：</span><br><span class="line">常数、聚合函数、GROUP BY指定的列名</span><br><span class="line">如果使用其它东西会报错</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>​<strong>注意</strong>：分组后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义。</p><p>​<strong>WHERE 和 HAVING区别</strong>：</p><ul><li>执行时机不一样：WHERE是分组之前进行限定，不满足WHERE条件，则不参与分组，而HAVING是分组之后对结果进行过滤。</li><li>判断的条件不一样：WHERE里不能写聚合函数，HAVING可以。<ul><li>因为执行顺序为：WHERE &gt; 聚合函数 &gt; HAVING</li></ul></li></ul><h5 id="E-分页查询-LIMIT"><a href="#E-分页查询-LIMIT" class="headerlink" title="E.分页查询(LIMIT)"></a>E.分页查询(LIMIT)</h5><h6 id="①语法"><a href="#①语法" class="headerlink" title="①语法"></a>①语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT  起始索引 , 查询条目数;</span><br></pre></td></tr></table></figure><h6 id="②说明-1"><a href="#②说明-1" class="headerlink" title="②说明"></a>②说明</h6><ul><li>起始索引：从0开始，表中第一条数据的索引为0。</li><li>起始索引 &#x3D; （当前页码数 - 1）* 每页显示的条数。</li><li>如果查询的是第一页数据，起始索引可以省略。</li><li>如果查询条目数大于实际表中的条目数，是不会报错的。</li><li>limit是MySQL特有的关键字。<ul><li>Oracle分页查询使用rownumber。</li><li>SQLServer分页查询使用top。</li></ul></li></ul><h5 id="F-DQL语句执行顺序"><a href="#F-DQL语句执行顺序" class="headerlink" title="F.DQL语句执行顺序"></a>F.DQL语句执行顺序</h5><img src="C:\Users\橙子\AppData\Roaming\Typora\typora-user-images\image-20220916215902346.png" alt="image-20220916215902346" style="zoom: 67%;" /><h4 id="6、DCL"><a href="#6、DCL" class="headerlink" title="6、DCL"></a>6、DCL</h4><h5 id="①概念"><a href="#①概念" class="headerlink" title="①概念"></a>①概念</h5><ol><li><p>DCL是用来管理用户和数据库访问权限的SQL语句。即：用来规定哪些用户可以访问数据库服务器了，用户可以访问哪个数据库。</p></li><li><p>MySQL中我们用 “用户名” 和 主机地址 来唯一标识一个用户。主机地址规定了当前用户只能通过哪个地址来访问当前服务器。如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost ;user： root</span><br><span class="line">//代表root用户只能通过localhost这个主机地址来访问当前数据库服务器。</span><br></pre></td></tr></table></figure></li></ol><h5 id="②DCL–管理用户"><a href="#②DCL–管理用户" class="headerlink" title="②DCL–管理用户"></a>②DCL–管理用户</h5><p>作用：规定哪些用户可以登录当前数据库管理系统。</p><h6 id="a-查询用户"><a href="#a-查询用户" class="headerlink" title="a.查询用户"></a>a.查询用户</h6><p>​查看当前数据库管理系统有哪些用户及其用户信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><h6 id="b-创建用户"><a href="#b-创建用户" class="headerlink" title="b.创建用户"></a>b.创建用户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;用户密码&#x27;;</span><br><span class="line">-- 如果想让用户在任意主机上访问到当前数据库，主机名里写 % 即可。</span><br></pre></td></tr></table></figure><p>​注意：用户创建完后可以访问数据库管理系统，但只能访问information_schema这个数据库。</p><h6 id="c-修改用户密码"><a href="#c-修改用户密码" class="headerlink" title="c.修改用户密码"></a>c.修改用户密码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><h6 id="d-删除用户"><a href="#d-删除用户" class="headerlink" title="d.删除用户"></a>d.删除用户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><h5 id="③DCL–权限控制"><a href="#③DCL–权限控制" class="headerlink" title="③DCL–权限控制"></a>③DCL–权限控制</h5><p>​作用：在用户登录数据库管理系统后，他们对数据库中的表有哪些操作权限。</p><p>​MySQL中常见的权限：</p><p><img src="/imgs/image-20220917122022874.png" alt="image-20220917122022874"></p><p><strong>USAGE</strong>：连接（登录）权限，建立一个用户，就会自动授予其usage权限。该权限只能用于数据库登录，不能执行任何操作，且该权限不能被回收，即使使用REVOKE也不能删除用户权限。</p><h6 id="a-查询用户拥有的权限"><a href="#a-查询用户拥有的权限" class="headerlink" title="a.查询用户拥有的权限"></a>a.查询用户拥有的权限</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br><span class="line">/*</span><br><span class="line">如果查询的结果为：GRANT USAGE ON *.* TO &#x27;用户名&#x27;@&#x27;主机&#x27;</span><br><span class="line">代表该用户只有登录数据库管理系统的权限。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h6 id="b-授予权限"><a href="#b-授予权限" class="headerlink" title="b.授予权限"></a>b.授予权限</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><h6 id="c-撤销权限"><a href="#c-撤销权限" class="headerlink" title="c.撤销权限"></a>c.撤销权限</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><h6 id="d-补充"><a href="#d-补充" class="headerlink" title="d.补充"></a>d.补充</h6><ol><li><p>多个权限之间，使用逗号分隔。</p></li><li><p>授权时，数据库名和表名可以使用 * 进行通配，* 的含义是：所有。如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON *.* TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;-- 所有数据库下的所有表</span><br><span class="line">GRANT 权限列表 ON 数据库名.* TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;-- 某个数据库下的所有表</span><br></pre></td></tr></table></figure></li></ol><h4 id="7、数据库中的数据类型"><a href="#7、数据库中的数据类型" class="headerlink" title="7、数据库中的数据类型"></a>7、数据库中的数据类型</h4><h5 id="A-数值类型"><a href="#A-数值类型" class="headerlink" title="A.数值类型"></a>A.数值类型</h5><table><thead><tr><th align="center">在Java中的对应</th><th align="center">数据类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">TINYINT</td><td align="center">1 byte</td><td align="center">小整数值</td></tr><tr><td align="center">short</td><td align="center">SMALLINT</td><td align="center">2 byte</td><td align="center">大整数值</td></tr><tr><td align="center"></td><td align="center">MEDIUMINT</td><td align="center">3 byte</td><td align="center">大整数值</td></tr><tr><td align="center">int</td><td align="center">INT或INTEGER</td><td align="center">4 byte</td><td align="center">大整数值</td></tr><tr><td align="center">Long</td><td align="center">BIGINT</td><td align="center">8 byte</td><td align="center">极大整数值</td></tr><tr><td align="center">float</td><td align="center">FLOAT(M,D)</td><td align="center">4byte</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">double</td><td align="center">DOUBLE(M,D)</td><td align="center">8 byte</td><td align="center">双精度浮点数值</td></tr><tr><td align="center"></td><td align="center">DECIMAL(M,D)</td><td align="center"></td><td align="center">小数值</td></tr></tbody></table><p>​说明：</p><ul><li><p>DECIMAL是以字符串的形式存储的，以保证存储更高精度的数据</p></li><li><p>DOUBLE、FLOAT、DOUBLE：在使用该类数据类型时，要指明其总长度M和小数点后保留的位数D</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score DOUBLE(5,2);</span><br><span class="line">/* 数据总长度为5，小数点后保留2位 */</span><br></pre></td></tr></table></figure></li><li><p>补充：数值型数据可以选择有符号和无符号的形式，它们的区别是：表示的数字范围不一样。<img src="/imgs/image-20220916133428507.png" alt="image-20220916133428507"></p><p>  要想使用无符号（不包括负数部分），需要在数据类型后面加上UNSIGNED。</p></li></ul><h5 id="B-日期时间类型"><a href="#B-日期时间类型" class="headerlink" title="B.日期时间类型"></a>B.日期时间类型</h5><table><thead><tr><th align="center">数据类型</th><th align="center">大小</th><th align="center">范围</th><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01 至 9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">年月日</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">-838：59：59 至 838：59：59</td><td align="center">HH:MM:SS</td><td align="center">时分秒</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901 至 2155</td><td align="center">YYYY</td><td align="center">年份</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center"></td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">年月日时分秒</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00 至 2038-01-19 03:14:07</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">时间戳</td></tr></tbody></table><p>​说明：</p><ul><li><p>TIMESTAMP：少用，当某个字段声明为这种数据类型时，如果没有赋值，系统就会赋默认的时间值。</p><ul><li><p>给DATE类型数据赋值时，用单引号将数据括起来，年月日之间用“ - ”隔开，如：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;1949-10-1&#x27;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="C-字符串类型"><a href="#C-字符串类型" class="headerlink" title="C.字符串类型"></a>C.字符串类型</h5><p><img src="/imgs/image-20220914100827037.png" alt="image-20220914100827037"></p><p>​最常用的是CHAR、VARCHAR。赋值时，数据用单引号或双引号括起来。</p><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><p>​①使用CHAR、VARCHAR时都得指明其最大的存放长度，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name CHAR(10);/* 最多存放10个汉字或10个字母 */</span><br><span class="line">name VARCHAR(10);/* 最多存放10个汉字或10个字母 */</span><br></pre></td></tr></table></figure><p>​②CHAR与VARCHAR的不同</p><ul><li>CAHR：不会根据实际存放数据的大小来决定最终存放空间大小，如：存放数据“张三”，其分配的空间仍为10个字符。其占用2个字符，剩余空间用空格补齐。</li><li>VARCHAR：会根据实际存放数据的大小来决定最终存放空间大小，存放数据“张三”，其分配的空间为2个字符。</li></ul><p>​③总结：</p><ul><li>CHAR：存储性能高，浪费空间。</li><li>VARCHAR：存储性能低，节约空间。</li><li>如果字符串的大小确定，我们使用CHAR；不确定，则使用VARCHAR。</li></ul><hr><h3 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h3><h4 id="①概念-1"><a href="#①概念-1" class="headerlink" title="①概念"></a>①概念</h4><p>​函数：与Java中的函数是一个意思</p><h4 id="②MySQL中常见的内置函数"><a href="#②MySQL中常见的内置函数" class="headerlink" title="②MySQL中常见的内置函数"></a>②MySQL中常见的内置函数</h4><h5 id="A-字符串函数"><a href="#A-字符串函数" class="headerlink" title="A.字符串函数"></a>A.字符串函数</h5><p><img src="/imgs/image-20220917133534020.png" alt="image-20220917133534020"></p><p>​注意</p><ol><li>SUBSTRING函数中的起始位置是从1开始的，不是从0开始。</li><li>LPAD(str,n,pad)：如果str的长度大于len指定的值，则截取str到len指定的长度。</li><li>RPAD(str,n,pad)：同理。</li></ol><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#由于业务需求变更，企业员工的工号，统一为5位，目前不足5位数的全部在前面补0。比如：1号员工的工号应该为：00001。</span><br><span class="line">UPDATE emp SET workno = lpad(workno,5,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure><h5 id="B-数值函数"><a href="#B-数值函数" class="headerlink" title="B.数值函数"></a>B.数值函数</h5><p><img src="/imgs/image-20220917141038649.png" alt="image-20220917141038649"></p><h6 id="①补充"><a href="#①补充" class="headerlink" title="①补充"></a>①补充</h6><ol><li><p>向上取整：只要有小数，其结果就为：去除小数后再加1。</p></li><li><p>向下取整：只要有小数，其结果就为：取整数部分。</p></li></ol><h6 id="②例子"><a href="#②例子" class="headerlink" title="②例子"></a>②例子</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#随机生成一个六位的数</span><br><span class="line">SELECT LPAD(FLOOR(RAND() * 1000000),6,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure><h5 id="C-日期函数"><a href="#C-日期函数" class="headerlink" title="C.日期函数"></a>C.日期函数</h5><p><img src="/imgs/image-20220917144159996.png" alt="image-20220917144159996"></p><h6 id="①说明"><a href="#①说明" class="headerlink" title="①说明"></a>①说明</h6><ol><li><p>DATE_ADD(date,INTERVAL expr type)：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">INTERVAL 是固定写法</span><br><span class="line">expr：添加的值，值为正数，代表日期向前移，负数表示日期向后移；</span><br><span class="line">type：添加值的类型，可以为DAY、MONTH、YEAR、hour、minute、second。</span><br><span class="line">*/</span><br><span class="line">#在当前时间上加上天</span><br><span class="line">SELECT DATE_ADD(NOW(),INTERVAL 7 DAY);</span><br></pre></td></tr></table></figure></li><li><p>datediff(date1,date2)：返回的是这两个日期之间相差的天数，其实现方式是：用date1 - date2。</p></li></ol><h6 id="②补充"><a href="#②补充" class="headerlink" title="②补充"></a>②补充</h6><ul><li><p>DATE_FORMAT(日期,表达式)</p><ul><li><p>用于格式化日期，返回用户想要的日期格式。</p></li><li><p>表达式为：</p>  <img src="/imgs/image-20230423204614405.png" alt="image-20230423204614405" style="zoom:80%;" /></li><li><p>例子：</p><ul><li><img src="/imgs/image-20230423204633980.png" alt="image-20230423204633980" style="zoom:80%;" /></li><li><img src="/imgs/image-20230423204649320.png" alt="image-20230423204649320" style="zoom:80%;" /></li></ul></li></ul></li></ul><h5 id="D-流程函数"><a href="#D-流程函数" class="headerlink" title="D.流程函数"></a>D.流程函数</h5><p><img src="/imgs/image-20220917164820707.png" alt="image-20220917164820707"></p><p>​说明：</p><ol><li><p>IF(value,t,f)：value为条件表达式。类似于三元运算符。</p></li><li><p>IFNULL(value1,value2)：value1为NULL，返回value2，注意：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(&#x27;&#x27;,123);-- value1的值不是NULL</span><br></pre></td></tr></table></figure></li><li><p>上表中的第三个函数类似于多重if。</p></li><li><p>上表中的第四个函数类似于switch…case…。</p></li></ol><p>练习：</p><p>​①</p><p><img src="/imgs/image-20220917172207506.png" alt="image-20220917172207506"></p><p>​②根据不同的分数段来输出不同的等级</p><p><img src="/imgs/image-20220917172349007.png" alt="image-20220917172349007"></p><h3 id="四、约束"><a href="#四、约束" class="headerlink" title="四、约束"></a>四、约束</h3><h4 id="①概念-2"><a href="#①概念-2" class="headerlink" title="①概念"></a>①概念</h4><p>​约束是作用在字段上的，用于对字段的值加以限制。</p><h4 id="②约束的分类"><a href="#②约束的分类" class="headerlink" title="②约束的分类"></a>②约束的分类</h4><ul><li>非空约束(限制该字段的数据不能为NULL)</li><li>唯一约束(保证该字段的所有数据都是唯一、不可重复的)</li><li>主键约束(主键是一行数据的唯一标识，要求非空且唯一)</li><li>检查约束（MySQL不支持检查约束，我们需要在Java中进行检查约束）</li><li>默认约束(保存数据时，如果未指定该字段的值，则采用默认值)</li><li>外键约束(用来让两张表的数据之间建立连接)</li></ul><p>​补充说明：</p><ol><li>一个字段可以有多个约束，它们之间<strong>用空格隔开</strong>。</li><li>约束使用在创建表的时候，写在每个字段的数据类型后面。</li></ol><h5 id="A-主键约束"><a href="#A-主键约束" class="headerlink" title="A.主键约束"></a>A.主键约束</h5><p>​关键字：<strong>PRIMARY KEY</strong></p><p>​说明：</p><ol><li>被声明为PRIMARY KEY的字段，该字段的值只能是非空且唯一的。</li><li>一张表中只能有一个主键。</li></ol><h5 id="B-唯一约束"><a href="#B-唯一约束" class="headerlink" title="B.唯一约束"></a>B.唯一约束</h5><p>​关键字：<strong>UNIQUE</strong></p><p>​说明：被声明为UNIQUE的字段，其值不能重复，最多只有一个非空记录。</p><h5 id="C-非空约束"><a href="#C-非空约束" class="headerlink" title="C.非空约束"></a>C.非空约束</h5><p>​关键字：<strong>NOT NULL</strong></p><p>​说明：被声明为NOT NULL的字段，其值不能为NULL，即必须有值。</p><h5 id="D-默认约束"><a href="#D-默认约束" class="headerlink" title="D.默认约束"></a>D.默认约束</h5><p>​关键字：<strong>DEFAULT</strong></p><p>​说明：被声明为DEFAULT的字段，如果没有给其赋值，其值为默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">    name VARCHAR(4), </span><br><span class="line">score int DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO student (name) VALUES (&#x27;Tom&#x27;);-- Tom的成绩默认值为0</span><br><span class="line">INSERT INTO student (name，score) VALUES (&#x27;Jack&#x27;,NULL);-- Jack的成绩为NULL，不是0</span><br></pre></td></tr></table></figure><h5 id="E-检查约束-MySQL8-0-16版本之后出现"><a href="#E-检查约束-MySQL8-0-16版本之后出现" class="headerlink" title="E.检查约束(MySQL8.0.16版本之后出现)"></a>E.检查约束(MySQL8.0.16版本之后出现)</h5><p>​保证字段值满足某一个或多个条件。</p><p>​关键字为：CHECK</p><p>​格式为：CHECK(检查条件)</p><h5 id="F-外键约束"><a href="#F-外键约束" class="headerlink" title="F.外键约束"></a>F.外键约束</h5><h6 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h6><p>​让表与表之间产生物理上的关系。</p><h6 id="②添加约束"><a href="#②添加约束" class="headerlink" title="②添加约束"></a>②添加约束</h6><ul><li><p>建表时添加约束</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [CONSTRAINT] [外键名称] FOREIGN KEY(外键列名) REFERENCES 主表(主表列名) ON DELETE 行为 ON UPDATE 行为</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在已有的表基础上添加约束</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 建完表后添加外键约束</span><br><span class="line">ALTER TABLE 表名 ADD [CONSTRAINT 外键名称] FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE 行为 ON DELETE 行为;</span><br></pre></td></tr></table></figure><p>  行为：</p><p>  <img src="/imgs/image-20220917202626617.png" alt="image-20220917202626617"></p><p>  其中：NO ACTION和RESTRICT为<strong>默认</strong>设置。</p></li></ul><h6 id="③删除约束"><a href="#③删除约束" class="headerlink" title="③删除约束"></a>③删除约束</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br></pre></td></tr></table></figure><h6 id="④说明"><a href="#④说明" class="headerlink" title="④说明"></a>④说明</h6><ol><li><p>创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表。</p></li><li><p>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据。</p></li></ol><h4 id="③-自增长操作"><a href="#③-自增长操作" class="headerlink" title="③.自增长操作"></a>③.自增长操作</h4><p>​关键字：AUTO_INCREMENT</p><p>​使用要求：被修饰的字段必须是数字类型 且 字段值满足唯一性。</p><p>​举例：</p><p>​当没有指定值 或 赋为NULL 时，都会采用自增的方式进行赋值，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test(</span><br><span class="line">id INT PRIMARY KEY auto_increment,</span><br><span class="line">name VARCHAR(4) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO test (name) VALUES (&#x27;Tom&#x27;);</span><br><span class="line">INSERT INTO test (id,name) VALUES (NULL,&#x27;Jack&#x27;);</span><br><span class="line">INSERT INTO test (id,name) VALUES (NULL,&#x27;Mary&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM test;</span><br></pre></td></tr></table></figure><p>​<img src="/imgs/image-20220915120547387.png" alt="image-20220915120547387"></p><h3 id="五、多表查询"><a href="#五、多表查询" class="headerlink" title="五、多表查询"></a>五、多表查询</h3><h4 id="①多表关系"><a href="#①多表关系" class="headerlink" title="①多表关系"></a>①多表关系</h4><h5 id="A-概述"><a href="#A-概述" class="headerlink" title="A.概述"></a>A.概述</h5><p>​表与表之间主要有三种关系：一对多、多对多、一对一</p><h5 id="B-一对多"><a href="#B-一对多" class="headerlink" title="B.一对多"></a>B.一对多</h5><p>​案例：部门 与 员工的关系</p><p>​实现：在多的一方建立外键，指向一的一方的主键。</p><h5 id="C-多对多"><a href="#C-多对多" class="headerlink" title="C.多对多"></a>C.多对多</h5><p>​案列：学生 与 课程的关系</p><p>​关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p>​实现：建立第三张中间表，中间表至少包含两个外键，分别为关联两方主键。</p><p><img src="/imgs/image-20220918102554074.png" alt="image-20220918102554074"></p><h5 id="D-一对一"><a href="#D-一对一" class="headerlink" title="D.一对一"></a>D.一对一</h5><p>​案例：用户 与 用户详情的关系</p><p>​关系：一对一关系，<strong>多用于单表拆分</strong>，将一张表的基础字段放在一张表中，其它详情字段放在另一张表中，以提升效率。</p><p>​实现：在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的(UNIQUE)。</p><h4 id="②多表查询分类"><a href="#②多表查询分类" class="headerlink" title="②多表查询分类"></a>②多表查询分类</h4><p>​多表查询：两张表之间不要求一定存在物理上的联系，换句话说，即使两张表之间没有物理上的联系也可以做多表查询。</p><ol><li>连接查询<ul><li><strong>内连接</strong>：相当于查询A表、B表交集部分数据</li><li><strong>外连接</strong><ol><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ol></li><li><strong>自连接</strong>：当前表与自身的连接查询，连接必须使用表别名</li></ul></li><li><strong>子查询</strong></li></ol><hr><h4 id="③内连接"><a href="#③内连接" class="headerlink" title="③内连接"></a>③内连接</h4><p>内连接：对两张表做笛卡尔积，然后再根据WHERE中的条件消除没有意义的笛卡尔积，得到表A，最后再对表A进行其它操作。</p><h5 id="A-内连接查询语法"><a href="#A-内连接查询语法" class="headerlink" title="A.内连接查询语法"></a>A.内连接查询语法</h5><h6 id="①隐式内连接"><a href="#①隐式内连接" class="headerlink" title="①隐式内连接"></a>①隐式内连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1,表2 WHERE 条件;</span><br></pre></td></tr></table></figure><h6 id="②显示内连接"><a href="#②显示内连接" class="headerlink" title="②显示内连接"></a>②显示内连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件;</span><br><span class="line"># INNER关键字可以省略，省不省略结果都一样。</span><br></pre></td></tr></table></figure><p>​</p><h5 id="B-补充"><a href="#B-补充" class="headerlink" title="B.补充"></a>B.补充</h5><ol><li>当表明比较长是，我们可以给表起别名，使用关键字AS(AS可以省略，省略后原表名与别名之间要有空格)。使用表别名之后，就不能再用原表名去调用相应的字段了。</li></ol><h4 id="④外连接"><a href="#④外连接" class="headerlink" title="④外连接"></a>④外连接</h4><h5 id="A-外连接查询语法"><a href="#A-外连接查询语法" class="headerlink" title="A.外连接查询语法"></a>A.外连接查询语法</h5><h6 id="①左外连接"><a href="#①左外连接" class="headerlink" title="①左外连接"></a>①左外连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...; </span><br></pre></td></tr></table></figure><p>​进行左外连接时，表1作为主表，表2作为副表。表1与表2进行笛卡尔积，根据ON后面的条件消除掉无用的数据，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</p><h6 id="②右外连接"><a href="#②右外连接" class="headerlink" title="②右外连接"></a>②右外连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件...; </span><br></pre></td></tr></table></figure><p>​进行右外连接时，表2作为主表，表1作为副表。表1与表2进行笛卡尔积，根据ON后面的条件消除掉无用的数据，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</p><h5 id="B-说明"><a href="#B-说明" class="headerlink" title="B.说明"></a>B.说明</h5><ol><li>语法中的OUTER关键字可以省略，省略后结果不变。</li><li>左外连接和右外连接可以相互转换。卡发中常用左外连接。</li></ol><h4 id="⑤自连接"><a href="#⑤自连接" class="headerlink" title="⑤自连接"></a>⑤自连接</h4><h5 id="A-自连接查询语法"><a href="#A-自连接查询语法" class="headerlink" title="A.自连接查询语法"></a>A.自连接查询语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件...;</span><br></pre></td></tr></table></figure><h5 id="B-说明-1"><a href="#B-说明-1" class="headerlink" title="B.说明"></a>B.说明</h5><ol><li><p>自连接必须指明表的别名，不然报错。</p></li><li><p>可以使用 内连接 或 外连接 实现自连接如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#由于表1和表2都是同一张表，所以这里的内连接也就属于自连接了。</span><br><span class="line">SELECT a.name,b.name FROM emp AS a ,emp AS b WHERE a.maragerid = b.id;</span><br><span class="line"></span><br><span class="line">#由于表1和表2都是同一张表，所以这里的外连接也就属于自连接了。</span><br><span class="line">SELECT a.name,b.name FROM emp AS a LEFT JOIN emp AS b ON a.maragerid = b.id;</span><br></pre></td></tr></table></figure></li></ol><h4 id="⑥联合查询"><a href="#⑥联合查询" class="headerlink" title="⑥联合查询"></a>⑥联合查询</h4><h5 id="A-概念"><a href="#A-概念" class="headerlink" title="A.概念"></a>A.概念</h5><p>​联合查询：把多次查询的结果合并起来，形成一个新的查询结果集。即：把结果B直接跟在结果A的后面，形成一个新的结果。</p><h5 id="B-联合查询语法"><a href="#B-联合查询语法" class="headerlink" title="B.联合查询语法"></a>B.联合查询语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A.....</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B...;</span><br></pre></td></tr></table></figure><p>​说明：</p><ol><li>如果UNION后面加上ALL，则代表不对合并之后的结果集进行去重。不加ALL，代表对合并后的结果集进行去重。</li></ol><h5 id="C-联合查询的前提条件"><a href="#C-联合查询的前提条件" class="headerlink" title="C.联合查询的前提条件"></a>C.联合查询的前提条件</h5><p>​对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。不然报错。</p><h4 id="⑦子查询"><a href="#⑦子查询" class="headerlink" title="⑦子查询"></a>⑦子查询</h4><h5 id="A-概述-1"><a href="#A-概述-1" class="headerlink" title="A.概述"></a>A.概述</h5><ol><li>子查询：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</li><li>子查询可以出现的位置：<strong>WHERE</strong>之后，<strong>FROM</strong>之后，<strong>SELECT</strong>之后。</li><li>根据子查询结果不同，分为：<ul><li>标量子查询(子查询结果为单个值)</li><li>列子查询(子查询结果为一列)</li><li>行子查询(子查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul></li></ol><h5 id="B-标量子查询"><a href="#B-标量子查询" class="headerlink" title="B.标量子查询"></a>B.标量子查询</h5><h6 id="①概念-3"><a href="#①概念-3" class="headerlink" title="①概念"></a>①概念</h6><p>​子查询返回的结果是单个值(数字、字符串、日期等)，这种子查询称为：标量子查询。</p><p>​对子查询结果的常用的操作符为：&#x3D;、&lt;&gt; 、&gt; 、&lt; 、&gt;&#x3D; 、&lt;&#x3D;</p><h6 id="②例子-1"><a href="#②例子-1" class="headerlink" title="②例子"></a>②例子</h6><p><img src="/imgs/image-20220919165348118.png" alt="image-20220919165348118"></p><h5 id="C-列子查询"><a href="#C-列子查询" class="headerlink" title="C.列子查询"></a>C.列子查询</h5><h6 id="①概念-4"><a href="#①概念-4" class="headerlink" title="①概念"></a>①概念</h6><p>​子查询返回的结果是一列(一列里可以有多行)，这种子查询称为列子查询。</p><h6 id="②操作符"><a href="#②操作符" class="headerlink" title="②操作符"></a>②操作符</h6><p>​使用如下操作符来操作列子查询返回的结果：</p><p><img src="/imgs/image-20220919172845463.png" alt="image-20220919172845463"></p><h6 id="③例子"><a href="#③例子" class="headerlink" title="③例子"></a>③例子</h6><p>​①</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查询比 财务部 所有人工资都高的员工信息</span><br><span class="line">-- 1.查询出财务部的部门ID</span><br><span class="line">SELECT id FROM dept WHERE name = &#x27;财务部&#x27;;</span><br><span class="line">-- 2.查询出财务部所有人的工资</span><br><span class="line">SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = &#x27;财务部&#x27;);</span><br><span class="line">-- 3.查询比 财务部 所有人工资都高的员工信息</span><br><span class="line">SELECT * FROM emp WHERE salary &gt; ALL (SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = &#x27;财务部&#x27;));</span><br></pre></td></tr></table></figure><p>​②</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询比 研发部 其中任意一个人工资高的员工信息</span><br><span class="line">SELECT * FROM emp WHERE salary &gt; SOME (SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h5 id="D-行子查询"><a href="#D-行子查询" class="headerlink" title="D.行子查询"></a>D.行子查询</h5><h6 id="①概念-5"><a href="#①概念-5" class="headerlink" title="①概念"></a>①概念</h6><p>​子查询返回的结果是一行(一行中可以有多列)，这种子查询称为：行子查询。</p><h6 id="②操作符-1"><a href="#②操作符-1" class="headerlink" title="②操作符"></a>②操作符</h6><p>​对行子查询结果进行操作的操作符有：&#x3D;、&lt;&gt;、IN、NOT IN</p><h6 id="③例子-1"><a href="#③例子-1" class="headerlink" title="③例子"></a>③例子</h6><p>​查询与 “张无忌” 的薪资及直属领导相同的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#1.先查询张无忌的薪资就直属领导</span><br><span class="line">SELECT salary,managerid FROM emp WHERE name = &#x27;张无忌&#x27;;-- 查询到了一行数据,salary = 12000,managerid = 1</span><br><span class="line"></span><br><span class="line">#2.查询与“张无忌”的薪资及直属领导相同的员工信息</span><br><span class="line">SELECT * FROM emp WHERE salary = 12000 AND managerid = 1;</span><br><span class="line"></span><br><span class="line">#如何将1、2中的SQL合成一个SQL</span><br><span class="line">SELECT * FROM emp WHERE (salary,managerid) = (12000,1);-- 与第四行等价</span><br><span class="line"></span><br><span class="line">#(12000,1)是由第一行语句得来的，所以可以用第一行语句替换掉(12000,1)</span><br><span class="line">#最终结果为：</span><br><span class="line">SELECT * FROM emp WHERE (salary,managerid) = (SELECT salary,managerid FROM emp WHERE name = &#x27;张无忌&#x27;;);</span><br></pre></td></tr></table></figure><h5 id="E-表子查询"><a href="#E-表子查询" class="headerlink" title="E.表子查询"></a>E.表子查询</h5><h6 id="①概念-6"><a href="#①概念-6" class="headerlink" title="①概念"></a>①概念</h6><p>​子查询返回的结果是多行多列，即返回一张表。这种子查询称为表子查询。</p><p>​表子查询常写在FROM的后面，将子查询得到的表作为临时表对其再进行相应的查询操作。</p><h6 id="②操作符-2"><a href="#②操作符-2" class="headerlink" title="②操作符"></a>②操作符</h6><p>​对于表子查询返回的结果我们可以使用下面的操作符进行处理：IN</p><h6 id="③例子-2"><a href="#③例子-2" class="headerlink" title="③例子"></a>③例子</h6><p>​①查询与 “鹿杖客” ，“宋远桥”的职位和薪资相同的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#1.查询 “鹿杖客” ，“宋远桥”的职位和薪资</span><br><span class="line">SELECT job,salary FROM emp WHERE name = &#x27;鹿杖客”&#x27; OR name = &#x27;宋远桥&#x27;;-- 返回职位、薪资表</span><br><span class="line">#2查询与 “鹿杖客” ，“宋远桥”的职位和薪资相同的员工信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM emp WHERE (job,salary) IN (SELECT job,salary FROM emp WHERE name = &#x27;鹿杖客”&#x27; OR name = &#x27;宋远桥&#x27;);</span><br><span class="line">-- 只要job和salary满足第二行代码得到的表中的其中一条数据，就会被SELECT</span><br></pre></td></tr></table></figure><p>​</p><p>​②查询入职日期是“2006-01-01” 之后的员工信息，及其部门信息。这里的子查询是放在FROM后面的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#1.先查询入职日期是“2006-01-01”之后的员工信息</span><br><span class="line">SELECT * FROM emp WHERE entrydate &gt; &#x27;2006-01-01&#x27;;</span><br><span class="line">#2.查询这部分员工，对应的部门信息</span><br><span class="line">SELECT e.*,d.* FROM (SELECT * FROM emp WHERE entrydate &gt; &#x27;2006-01-01&#x27;) AS e LEFT JOIN dept AS d ON e.dept_id = d.id;</span><br></pre></td></tr></table></figure><h4 id="⑧多表查询总结"><a href="#⑧多表查询总结" class="headerlink" title="⑧多表查询总结"></a>⑧多表查询总结</h4><p>​多表查询的重点是找到连接条件，通过连接条件就可以消除无用的笛卡尔积。然后再对得到的数据进行查询即可。</p><h3 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h3><h4 id="①事务简介"><a href="#①事务简介" class="headerlink" title="①事务简介"></a>①事务简介</h4><h5 id="A-引入"><a href="#A-引入" class="headerlink" title="A.引入"></a>A.引入</h5><p>​假如转账操作需要执行以下三个步骤：（张三向李四转账）</p><p>​1.查询张三账户余额</p><p>​2.张三账户余额 - 1000</p><p>​3.李四账户余额 +1000</p><p>​当上述步骤都正常执行时，就成功完成一次转账任务。但如果执行到步骤2时，系统出现了异常，导致步骤3不能继续执行，这时候就会造成数据的不完整性。为了避免出现这种情况，我们引入了“事务”这一概念。将上述操作放到事务中，当任意一个步骤出现异常时，剩下的步骤不会执行，然后将之前临时修改过的数据都恢复原样（这一过程被称为：回滚事务）。只有当上述步骤都正常执行时，系统才会将临时修改的数据提交，这样才真正把数据库中的数据修改。这样就可以保证数据的正确性和完整性。</p><h5 id="B-概念"><a href="#B-概念" class="headerlink" title="B.概念"></a>B.概念</h5><p>​事务：是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><h5 id="C-说明"><a href="#C-说明" class="headerlink" title="C.说明"></a>C.说明</h5><p>​在MySQL中，事务是默认自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</p><h4 id="②事务操作"><a href="#②事务操作" class="headerlink" title="②事务操作"></a>②事务操作</h4><h5 id="A-方式一"><a href="#A-方式一" class="headerlink" title="A.方式一"></a>A.方式一</h5><h6 id="①语法-1"><a href="#①语法-1" class="headerlink" title="①语法"></a>①语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@autocommit;-- 查看当前窗口事务的提交方式</span><br><span class="line">#1.设置事务提交方式为手动提交，如果设置1，则代表自动提交事务</span><br><span class="line">SET @@autocommit = 0;</span><br><span class="line"></span><br><span class="line">#2.下面写需要被包在事务里的操作,如：更新操作等</span><br><span class="line">UPDATE .....;</span><br><span class="line"></span><br><span class="line">#3.</span><br><span class="line">COMMIT;-- 提交事务</span><br><span class="line">ROLLBACK;-- 回滚事务</span><br></pre></td></tr></table></figure><h6 id="②说明-2"><a href="#②说明-2" class="headerlink" title="②说明"></a>②说明</h6><ul><li>SET @@autocommit &#x3D; 0;当执行完这条语句之后，事务的提方式变为手动提交，只要没执行COMMIT就不会对数据库中的数据进行修改。其作用范围是：当前窗口有效。</li><li>当执行操作都没有出现异常时，我们才去执行COMMIT，将数据写到数据库中。</li><li>当执行操作出现异常时，我们需要使用ROLLBACK来撤回之前执行相应的操作，此时数据库中的数据并没有被改变。</li></ul><h5 id="B-方式二"><a href="#B-方式二" class="headerlink" title="B.方式二"></a>B.方式二</h5><h6 id="①语法-2"><a href="#①语法-2" class="headerlink" title="①语法"></a>①语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1.</span><br><span class="line">START TRANSACTION;-- 或者写 BEGIN</span><br><span class="line"></span><br><span class="line">#2.下面写需要被包在事务里的操作,如：更新操作等</span><br><span class="line">UPDATE .....;</span><br><span class="line"></span><br><span class="line">#3.</span><br><span class="line">COMMIT;-- 提交事务</span><br><span class="line">ROLLBACK;-- 回滚事务</span><br></pre></td></tr></table></figure><h6 id="②说明-3"><a href="#②说明-3" class="headerlink" title="②说明"></a>②说明</h6><ul><li>这种方式并没有修改事务提交的方式</li><li>当选中第2部分的代码进行执行时，涉及到的数据并没有立即写到数据库中，而是等到执行COMMIT时才会对涉及到的数据写到数据库中。</li><li>当执行操作都没有出现异常时，我们才去执行COMMIT，将数据写到数据库中。</li><li>当执行操作出现异常时，我们需要使用ROLLBACK来撤回之前执行相应的操作，此时数据库中的数据并没有被改变。</li></ul><h4 id="③事务四大特性-ACID"><a href="#③事务四大特性-ACID" class="headerlink" title="③事务四大特性(ACID)"></a>③事务四大特性(ACID)</h4><ol><li>原子性(Atomicity)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency)：事务完成时，必须使所有的数据都保持一致状态。如：转账中，两人账户的总钱数是不变的。</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。如：有两并发事务A、B，它们之间不会相互影响。</li><li>持久性(Duration)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ol><h4 id="④并发事务问题"><a href="#④并发事务问题" class="headerlink" title="④并发事务问题"></a>④并发事务问题</h4><p>​当多个事务共同访问同一个数据库或数据库中的同一张表时，就可能出现并发事务问题。具体的问题有：脏读、不可重复读、幻读</p><h5 id="A-脏读"><a href="#A-脏读" class="headerlink" title="A.脏读"></a>A.脏读</h5><p>​脏读：一个事务读到另一个事务还没有提交的数据。</p><p>​如下图：事务A对数据库中的数据进DB行查询操作，然后对数据进行更新操作，此时事务B也进来对数据库DB进行查询操作，事务B就能读到事务A还没提交的数据了。</p><p><img src="/imgs/image-20220920174038881.png" alt="image-20220920174038881"></p><p>​</p><h5 id="B-不可重复读"><a href="#B-不可重复读" class="headerlink" title="B.不可重复读"></a>B.不可重复读</h5><p>​不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</p><p>​如下图：事务B在事务A执行第三步操作之前，对数据进行了修改并提交了事务，此时事务A再读取同一条数据时，数据的内容就发生了改变了。</p><p><img src="/imgs/image-20220920174923913.png" alt="image-20220920174923913"></p><h5 id="C-幻读"><a href="#C-幻读" class="headerlink" title="C.幻读"></a>C.幻读</h5><p>​幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了“幻影”。</p><p>​如下图：事务A在执行步骤一时，发现数据库DB中没有所查询的记录，然后就执行步骤2来添加数据。但在事务A添加数据之前事务B添加了事务A所要查询的数据并提交事务，这样就会导致事务A在插入数据时失败，然后事务A又对该数据进行查询，发现并没有该数据存在。</p><p><img src="/imgs/image-20220920180611632.png" alt="image-20220920180611632"></p><h4 id="⑤事务隔离级别"><a href="#⑤事务隔离级别" class="headerlink" title="⑤事务隔离级别"></a>⑤事务隔离级别</h4><h5 id="A-引入-1"><a href="#A-引入-1" class="headerlink" title="A.引入"></a>A.引入</h5><p>​为了解决并发事务中的问题，我们引入了事务隔离级别来处理。</p><h5 id="B-事务隔离级别"><a href="#B-事务隔离级别" class="headerlink" title="B.事务隔离级别"></a>B.事务隔离级别</h5><p><img src="/imgs/image-20220920205433460.png" alt="image-20220920205433460"></p><p>​说明：</p><ol><li>×：代表不会出现。</li><li>Serializable的隔离级别最高，但性能最差，Read uncommitted的隔离级别最低，性能最好。</li><li>Repeatable Read是MySQL默认的事务隔离级别，而Oracle数据库的默认事务隔离级别为Read committed。</li><li>当事务的隔离级别为Serializable时，有两个并发事务A、B，事务A正在操作数据库当中的student表，此时事务B也想操作student表，但事务B不能操作，只能等事务A操作完student表之后才能操作。</li></ol><p>​</p><h5 id="C-相关操作"><a href="#C-相关操作" class="headerlink" title="C.相关操作"></a>C.相关操作</h5><h6 id="①查看事务隔离级别"><a href="#①查看事务隔离级别" class="headerlink" title="①查看事务隔离级别"></a>①查看事务隔离级别</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br></pre></td></tr></table></figure><h6 id="②设置事务隔离级别"><a href="#②设置事务隔离级别" class="headerlink" title="②设置事务隔离级别"></a>②设置事务隔离级别</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure><p>​说明</p><ul><li>SESSION：设置事务的隔离级别只在当前窗口有效。</li><li>GLOBAL：设置事务的隔离级别的有效范围为：全部窗口。</li><li>一般我们会使用默认的隔离级别。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/04/20/jdbc/"/>
      <url>/2023/04/20/jdbc/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JDBC简介"><a href="#一、JDBC简介" class="headerlink" title="一、JDBC简介"></a>一、JDBC简介</h3><h4 id="①JDBC概念"><a href="#①JDBC概念" class="headerlink" title="①JDBC概念"></a>①JDBC概念</h4><ul><li>JDBC就是使用Java语言操作关系型数据库的一套API。</li></ul><h4 id="②JDBC本质"><a href="#②JDBC本质" class="headerlink" title="②JDBC本质"></a>②JDBC本质</h4><ul><li>SUN公司定义的一套操作所有关系型数据库的规则，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</li><li>我们可以使用这套(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h4 id="③JDBC好处"><a href="#③JDBC好处" class="headerlink" title="③JDBC好处"></a>③JDBC好处</h4><ul><li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发。</li><li>可随时替换底层数据库，访问数据库的Java代码基本不变。</li></ul><h4 id="④补充"><a href="#④补充" class="headerlink" title="④补充"></a>④补充</h4><p>​当我们需要使用不同的数据库时，我们只需要导入不同的数据库驱动jar包即可。</p><img src="/imgs/image-20230423202509764.png" alt="image-20230423202509764" style="zoom: 67%;" /><hr><h3 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h3><p>​通过JDBC来连接数据库。</p><h4 id="①实现步骤"><a href="#①实现步骤" class="headerlink" title="①实现步骤"></a>①实现步骤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.导入驱动jar包</span></span><br><span class="line">mysql-connector-java-<span class="number">5.1</span><span class="number">.34</span>.jar</span><br><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//&quot;com.mysql.jdbc.Driver&quot;是固定的</span></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="comment">//3.定义SQL语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update...&quot;</span>;</span><br><span class="line"><span class="comment">//4.获取执行SQL对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">//5.执行SQL</span></span><br><span class="line">stmt.execuleUpdate(sql);<span class="comment">//返回受影响的行数，</span></span><br><span class="line"><span class="comment">//6.处理返回结果</span></span><br><span class="line"><span class="comment">//7.释放资源 </span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="comment">//如果使用到了如下类的对象，就把这些对象的资源释放掉</span></span><br><span class="line"><span class="comment">//Connection、Statement、PreparedStatement、ResultSet</span></span><br></pre></td></tr></table></figure><h4 id="②实现步骤的说明"><a href="#②实现步骤的说明" class="headerlink" title="②实现步骤的说明"></a>②实现步骤的说明</h4><ul><li>注册驱动：说明接下来使用的是哪个驱动。即说明接下来使用的是哪个数据库提供的JDBC接口实现类。</li><li>getConnection(url,username,password)：<ul><li>url：jdbc:mysql:&#x2F;&#x2F;数据库管理系统所在主机的地址(或域名)：3306&#x2F;连接的是数据库管理系统下的哪个数据库。例子：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1。</li><li>username、password：登录数据库管理系统时的用户名和密码。</li></ul></li><li>执行SQL：将SQL语句发送给数据库，让数据库处理这些SQL语句。</li></ul><h4 id="③JDBC-API详解"><a href="#③JDBC-API详解" class="headerlink" title="③JDBC  API详解"></a>③JDBC  API详解</h4><h5 id="A-DriverManager"><a href="#A-DriverManager" class="headerlink" title="A.DriverManager"></a>A.DriverManager</h5><h6 id="①概述"><a href="#①概述" class="headerlink" title="①概述"></a>①概述</h6><p>​DriverManager属于工具类，该类的两个主要功能是：注册驱动、获取数据库连接。</p><h6 id="②注册驱动"><a href="#②注册驱动" class="headerlink" title="②注册驱动"></a>②注册驱动</h6><ul><li><p>实现原理：</p><p>  ​按照JDBC中的实现步骤，我们用Class.forName(“com.mysql.jdbc.Driver”)来注册驱动。该代码底层实现原理是：</p><p>  ​Driver是一个类，该类中有一个静态代码块，静态代码块中调用了DriverManager类中的静态方法registerDriver()，该方法就是用来注册驱动的。</p><p>  ​所以当通过反射来加载Driver类时，同时也执行了Driver类中的静态代码块，也就调用了registerDriver()来注册驱动了。</p></li><li><p>提示：</p><p>  ​如果使用的是MySQL 5之后的驱动jar包，那么就可以省略注册驱动的步骤。</p></li></ul><h6 id="③获取连接"><a href="#③获取连接" class="headerlink" title="③获取连接"></a>③获取连接</h6><p>​调用DriverManager类中的静态方法getConnection(String url,String user,String password)，该方法返回的是一个Connection类的对象。</p><p>​<strong>细节</strong>：</p><ul><li><p>如果连接的是本机MySQL服务器(即地址为127.0.0.1)，并且MySQL服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称</p></li><li><p>当我们执行该语句后，运行结果中会显示一个警告：建议以安全的方式连接数据库(SSL)，但这种连接方式会使性能降低，一般不使用。为了不出现这个警告，我们可以在url的最后面加上：?useSSL&#x3D; fasle即可。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="B-Connection"><a href="#B-Connection" class="headerlink" title="B.Connection"></a>B.Connection</h5><h6 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h6><p>​获取执行SQL的对象、管理事务。</p><h6 id="②获取执行SQL对象"><a href="#②获取执行SQL对象" class="headerlink" title="②获取执行SQL对象"></a>②获取执行SQL对象</h6><ol><li>普通执行SQL对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span></span><br></pre></td></tr></table></figure><ol start="2"><li>预编译SQL的执行SQL对象：防止SQL注入</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(sql)</span></span><br><span class="line"><span class="comment">//关闭资源时，记得把PreparedStatement对象也关闭掉</span></span><br></pre></td></tr></table></figure><ol start="3"><li>执行存储过程的对象（少用，了解即可）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement prepareCall(sql)</span><br></pre></td></tr></table></figure><h6 id="③事务管理"><a href="#③事务管理" class="headerlink" title="③事务管理"></a>③事务管理</h6><ul><li><p>概述：</p><p>  <img src="/imgs/image-20220921154856156.png" alt="image-20220921154856156"></p><p>  Conncetion中也有三个方法来管理事务，它们分别对应着MySQL中的事务管理的三个步骤。</p><p>  <img src="/imgs/image-20220921155103081.png" alt="image-20220921155103081"></p></li><li><p>使用：</p><p>  开启事务的代码写在执行SQL之前，提交事务的代码写在“处理事务返回的结果”的后面，然后将开启事务到提交事务之间的代码用try包起来，在catch里写回滚事务的代码。</p></li></ul><h5 id="C-Statement"><a href="#C-Statement" class="headerlink" title="C.Statement"></a>C.Statement</h5><h6 id="①作用-1"><a href="#①作用-1" class="headerlink" title="①作用"></a>①作用</h6><p>​执行SQL语句</p><h6 id="②相关方法"><a href="#②相关方法" class="headerlink" title="②相关方法"></a>②相关方法</h6><ol><li><p>int executeUpdate(sql)</p><p> 该方法执行的是DML、DDL语句<br> 返回值：<br>  ①DML语句受影响的行数，我们可以根据返回的行数来判断，该SQL是否执行成功<br> ②DDL语句执行后，执行成功也可能返回0，如：创建数据库或创建表执行成功了，受影响行数也为0</p></li><li><p>ResultSet executeQuery(sql)</p><p> 该方法执行的是DQL语句<br> 返回值：ResultSet结果集对象</p></li></ol><p><code>注意</code>：关闭资源时，记得把ResultSet对象资源也得关闭。</p><h5 id="D-ResultSet"><a href="#D-ResultSet" class="headerlink" title="D.ResultSet"></a>D.ResultSet</h5><h6 id="①概述-1"><a href="#①概述-1" class="headerlink" title="①概述"></a>①概述</h6><p>​ResultSet中存储了通过executeQuery(sql)查询得到的结果。(说明：这里的sql特指DQL语句)</p><p>​由于DQL语句查询得到的结果为：一个数据 或 一行数据 或 一张表</p><p>​所以实际上，ResultSet中存储的是一个数据 或 一行数据 或 一张表。</p><h6 id="②获取查询结果"><a href="#②获取查询结果" class="headerlink" title="②获取查询结果"></a>②获取查询结果</h6><ul><li>boolean next()<ul><li>作用：①将光标从当前位置向下移动一行。(光标的初始位置为：表头) ②判断当前行是否为有效行。</li><li>返回值：<ul><li>true：有效行，代表当前行有数据。</li><li>false：无效行，代表当前行没有数据。</li></ul></li></ul></li><li>xxx getXxx(参数)<ul><li>作用：获取数据</li><li>Xxx：数据类型；如：int getInt(参数)</li><li>参数：二选一<ul><li>①int：列的编号，从1开始。</li><li>②String：列的名称</li></ul></li></ul></li></ul><h6 id="③练习"><a href="#③练习" class="headerlink" title="③练习"></a>③练习</h6><p>​查询account账户表数据，封装为Account对象中，并存储到ArrayList集合中。</p><h5 id="E-PreparedStatement"><a href="#E-PreparedStatement" class="headerlink" title="E.PreparedStatement"></a>E.PreparedStatement</h5><h6 id="①概述-2"><a href="#①概述-2" class="headerlink" title="①概述"></a>①概述</h6><p>​PreparedStatement是一个接口，其继承Statement类。</p><p>​其作用：执行SQL语句，并且能够预防SQL注入。</p><h6 id="②SQL注入"><a href="#②SQL注入" class="headerlink" title="②SQL注入"></a>②SQL注入</h6><p>​SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p><p>​如：在登录输入密码时，写入一段SQL代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#如现登录的用户名为张三，其密码为123</span><br><span class="line">SELECT * FROM user_login WHERE name = &#x27;张三&#x27; AND password = &#x27;123&#x27;;-- 如果查询到数据，就代表该用户存在且密码正确，登录成功</span><br><span class="line"></span><br><span class="line">#如果我在输入密码时写了作用的SQL语句：&#x27; or &#x27;1&#x27; = &#x27;1&#x27;</span><br><span class="line">SELECT * FROM user_login WHERE name = &#x27;张三&#x27; AND password = &#x27;&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span><br><span class="line">-- 此时用户输入的密码就改变了原来查询语句的面貌，导致WHERE后面的条件永远成立，select就能查询到数据，代表着登录成功了。这就是SQL注入。</span><br></pre></td></tr></table></figure><p>​</p><h6 id="③解决SQL注入"><a href="#③解决SQL注入" class="headerlink" title="③解决SQL注入"></a>③解决SQL注入</h6><p>​<strong>实现步骤</strong>：</p><ol><li><p>获取PreparedStatement对象，用Connection类的对象去调用prepareStatement(sql)方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br></pre></td></tr></table></figure><p> 注意：sql语句中的参数值，使用 “ ? ” 占位符代替，如：</p><p> sql可以为增删改查操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置参数。通过PreparedStatement类的对象去调用setXxx(参数1,参数2)去给 “ ? ”赋值。</p><p> 说明：</p><ul><li>Xxx：数据类型；如：setInt(参数1，参数2)</li><li>参数：<ul><li>参数1：? 的位置。第一个?的位置为1。</li><li>参数2：? 的值。</li></ul></li></ul></li><li><p>执行SQL。通过PreparedStatement类的对象调用execuleUpdate()或executeQuery()来执行SQL语句。注意：不用再向这两个方法传递SQL语句。</p></li></ol><h6 id="④解决SQL注入的原理"><a href="#④解决SQL注入的原理" class="headerlink" title="④解决SQL注入的原理"></a>④解决SQL注入的原理</h6><p>​当我们通过setXxx方法来设置占位符 “?” 的值时，会对设置的值进行校验，如果其中涉及到了一些SQL关键字或单引号等会对其进行转移操作，即将这些变成字符串。这样就不会产生SQL注入了。</p><h6 id="⑤PreparedStatement原理"><a href="#⑤PreparedStatement原理" class="headerlink" title="⑤PreparedStatement原理"></a>⑤PreparedStatement原理</h6><ul><li><strong>PreparedStatement的好处</strong><ol><li>预编译SQL，性能提高。</li><li>防止SQL注入：将敏感字符进行转义。</li><li>PreparedStatement<strong>预编译功能默认是关闭的</strong>，<strong>需要我们手动开启</strong>，在获取数据库连接时，在url后面加上“<strong>useServerPrepStmts &#x3D; true</strong>”，<strong>并且在这段代码前加上 &amp; 和前面的内容连起来</strong>。</li></ol></li><li><strong>PreparedStatement原理</strong><ol><li>在获取PreparedStatement对象时，将SQL语句发送给MySQL服务器进行检查，编译(这些步骤很耗时)。</li><li>执行SQL时就不用再进行检查和预编译了，速度更快。</li><li>如果SQL语句的模板一样，则只需要进行一次检查和预编译。</li></ol></li><li><strong>PreparedStatement比以普通的方式执行SQL快在哪里？</strong><ol><li>普通的方式进行SQL：其在执行SQL时才将SQL语句发送给数据库进行检查和编译，最后才真正执行。比预编译耗时。</li><li>普通的方式进行SQL：需要对每一条SQL语句进行检查和编译，预编译的话，只要模板相同就只执行一次检查和编译，节省了时间。</li></ol></li></ul><hr><h4 id="④数据库连接池"><a href="#④数据库连接池" class="headerlink" title="④数据库连接池"></a>④数据库连接池</h4><h5 id="A-概述"><a href="#A-概述" class="headerlink" title="A.概述"></a>A.概述</h5><ol><li>数据库连接池：是个容器，负责分配、管理数据库连接。</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。—&gt; 资源复用、提高响应效率</li><li>释放空间时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。—&gt; 避免数据库连接遗漏</li></ol><p>​<strong>好处</strong>：</p><ul><li>资源复用</li><li>提高响应效率</li><li>避免数据库连接遗漏</li></ul><p>​</p><h5 id="B-数据库连接池实现"><a href="#B-数据库连接池实现" class="headerlink" title="B.数据库连接池实现"></a>B.数据库连接池实现</h5><h6 id="①概述-3"><a href="#①概述-3" class="headerlink" title="①概述"></a>①概述</h6><ol><li><p>官方(SUN公司)提供了数据库连接池的标准接口DataSource，该接口由第三方组织实现。</p><ul><li><p>该接口的功能是：获取数据库连接，该接口中有一个方法：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection getConnection()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常见的数据库连接池：DBCP、C3P0、Druid</p><ul><li>Druid：是阿里巴巴开源的数据库连接池项目。其功能强大，性能优秀。</li></ul></li></ol><h6 id="②Druid使用步骤"><a href="#②Druid使用步骤" class="headerlink" title="②Druid使用步骤"></a>②Druid使用步骤</h6><ol><li><p>导入jar包：druid-1.1.12.jar</p></li><li><p>定义配置文件，文件的后缀为properties。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">driverClassName = com.mysql.jdbc.Driver<span class="comment">//注册数据库驱动，使用哪个数据库就注册哪个数据库驱动</span></span><br><span class="line">url = jdbc:mysql:<span class="comment">//数据库管理系统所在主机的地址(或域名)：3306/连接的是数据库管理系统下的哪个数据库。例子：jdbc:mysql://127.0.0.1:3306/db1。</span></span><br><span class="line">username = 登录数据库的用户</span><br><span class="line">password = 密码</span><br><span class="line">initialSize = <span class="number">5</span> <span class="comment">//初始化连接数量</span></span><br><span class="line">maxActive = <span class="number">10</span> <span class="comment">//最大连接数</span></span><br><span class="line">maxWait = <span class="number">3000</span> <span class="comment">//最大等待时间，单位为毫秒</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//还有其它参数可以设置</span></span><br></pre></td></tr></table></figure></li><li><p>加载配置文件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//创建配置文件对象</span></span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;配置文件的路径&quot;</span>));<span class="comment">//加载配置文件</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据库连接池对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourcrFactory.createDataSourcr(prop);<span class="comment">//该方法会抛异常</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据库连接</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> ds.getConnection();</span><br></pre></td></tr></table></figure></li><li><p>获取连接之后，就定义SQL，获取执行SQL的对象，执行SQL，释放资源。</p></li></ol><p>​</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
